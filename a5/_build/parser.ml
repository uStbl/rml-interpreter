
(* This generated code requires the following version of MenhirLib: *)

let () =
  MenhirLib.StaticVersion.require_20190924

module MenhirBasics = struct
  
  exception Error
  
  type token = 
    | WITH of (
# 13 "parser.mly"
       (Types.pre_info)
# 16 "parser.ml"
  )
    | WILDCARD of (
# 8 "parser.mly"
       (Types.pre_info)
# 21 "parser.ml"
  )
    | VAR of (
# 5 "parser.mly"
       (string Types.info)
# 26 "parser.ml"
  )
    | UNIT of (
# 18 "parser.mly"
       (Types.pre_info)
# 31 "parser.ml"
  )
    | TRUE of (
# 6 "parser.mly"
       (Types.pre_info)
# 36 "parser.ml"
  )
    | TO of (
# 14 "parser.mly"
       (Types.pre_info)
# 41 "parser.ml"
  )
    | THEN of (
# 11 "parser.mly"
       (Types.pre_info)
# 46 "parser.ml"
  )
    | SUB of (
# 9 "parser.mly"
       (Types.pre_info)
# 51 "parser.ml"
  )
    | STRING of (
# 18 "parser.mly"
       (Types.pre_info)
# 56 "parser.ml"
  )
    | STR of (
# 4 "parser.mly"
       (string Types.info)
# 61 "parser.ml"
  )
    | SPAWN of (
# 13 "parser.mly"
       (Types.pre_info)
# 66 "parser.ml"
  )
    | SEND of (
# 14 "parser.mly"
       (Types.pre_info)
# 71 "parser.ml"
  )
    | SEMICOLON of (
# 17 "parser.mly"
       (Types.pre_info)
# 76 "parser.ml"
  )
    | SELF of (
# 19 "parser.mly"
       (Types.pre_info)
# 81 "parser.ml"
  )
    | RPAREN of (
# 17 "parser.mly"
       (Types.pre_info)
# 86 "parser.ml"
  )
    | RETURN of (
# 16 "parser.mly"
       (Types.pre_info)
# 91 "parser.ml"
  )
    | REF of (
# 10 "parser.mly"
       (Types.pre_info)
# 96 "parser.ml"
  )
    | RECV of (
# 15 "parser.mly"
       (Types.pre_info)
# 101 "parser.ml"
  )
    | REC of (
# 8 "parser.mly"
       (Types.pre_info)
# 106 "parser.ml"
  )
    | RBRACK of (
# 17 "parser.mly"
       (Types.pre_info)
# 111 "parser.ml"
  )
    | PROMISE of (
# 18 "parser.mly"
       (Types.pre_info)
# 116 "parser.ml"
  )
    | PIPE of (
# 9 "parser.mly"
       (Types.pre_info)
# 121 "parser.ml"
  )
    | OR of (
# 9 "parser.mly"
       (Types.pre_info)
# 126 "parser.ml"
  )
    | NOT of (
# 10 "parser.mly"
       (Types.pre_info)
# 131 "parser.ml"
  )
    | NE of (
# 9 "parser.mly"
       (Types.pre_info)
# 136 "parser.ml"
  )
    | MUL of (
# 9 "parser.mly"
       (Types.pre_info)
# 141 "parser.ml"
  )
    | MOD of (
# 9 "parser.mly"
       (Types.pre_info)
# 146 "parser.ml"
  )
    | MATCH of (
# 12 "parser.mly"
       (Types.pre_info)
# 151 "parser.ml"
  )
    | LT of (
# 9 "parser.mly"
       (Types.pre_info)
# 156 "parser.ml"
  )
    | LPAREN of (
# 17 "parser.mly"
       (Types.pre_info)
# 161 "parser.ml"
  )
    | LIST of (
# 18 "parser.mly"
       (Types.pre_info)
# 166 "parser.ml"
  )
    | LET of (
# 8 "parser.mly"
       (Types.pre_info)
# 171 "parser.ml"
  )
    | LE of (
# 9 "parser.mly"
       (Types.pre_info)
# 176 "parser.ml"
  )
    | LBRACK of (
# 17 "parser.mly"
       (Types.pre_info)
# 181 "parser.ml"
  )
    | INT_LIT of (
# 3 "parser.mly"
       (int Types.info)
# 186 "parser.ml"
  )
    | INT of (
# 18 "parser.mly"
       (Types.pre_info)
# 191 "parser.ml"
  )
    | INCLUDE of (
# 19 "parser.mly"
       (Types.pre_info)
# 196 "parser.ml"
  )
    | IN of (
# 8 "parser.mly"
       (Types.pre_info)
# 201 "parser.ml"
  )
    | IF of (
# 11 "parser.mly"
       (Types.pre_info)
# 206 "parser.ml"
  )
    | HANDLE of (
# 18 "parser.mly"
       (Types.pre_info)
# 211 "parser.ml"
  )
    | GT of (
# 9 "parser.mly"
       (Types.pre_info)
# 216 "parser.ml"
  )
    | GE of (
# 9 "parser.mly"
       (Types.pre_info)
# 221 "parser.ml"
  )
    | FUN of (
# 7 "parser.mly"
       (Types.pre_info)
# 226 "parser.ml"
  )
    | FALSE of (
# 6 "parser.mly"
       (Types.pre_info)
# 231 "parser.ml"
  )
    | EQ of (
# 9 "parser.mly"
       (Types.pre_info)
# 236 "parser.ml"
  )
    | EOF of (
# 17 "parser.mly"
       (Types.pre_info)
# 241 "parser.ml"
  )
    | END of (
# 17 "parser.mly"
       (Types.pre_info)
# 246 "parser.ml"
  )
    | ELSE of (
# 11 "parser.mly"
       (Types.pre_info)
# 251 "parser.ml"
  )
    | DIV of (
# 9 "parser.mly"
       (Types.pre_info)
# 256 "parser.ml"
  )
    | DEREF of (
# 10 "parser.mly"
       (Types.pre_info)
# 261 "parser.ml"
  )
    | CONS of (
# 12 "parser.mly"
       (Types.pre_info)
# 266 "parser.ml"
  )
    | COMMA of (
# 17 "parser.mly"
       (Types.pre_info)
# 271 "parser.ml"
  )
    | COLON of (
# 17 "parser.mly"
       (Types.pre_info)
# 276 "parser.ml"
  )
    | CAT of (
# 9 "parser.mly"
       (Types.pre_info)
# 281 "parser.ml"
  )
    | CASE of (
# 12 "parser.mly"
       (Types.pre_info)
# 286 "parser.ml"
  )
    | BOOL of (
# 18 "parser.mly"
       (Types.pre_info)
# 291 "parser.ml"
  )
    | BIND of (
# 9 "parser.mly"
       (Types.pre_info)
# 296 "parser.ml"
  )
    | BEGIN of (
# 17 "parser.mly"
       (Types.pre_info)
# 301 "parser.ml"
  )
    | AWAIT of (
# 8 "parser.mly"
       (Types.pre_info)
# 306 "parser.ml"
  )
    | ASSIGN of (
# 9 "parser.mly"
       (Types.pre_info)
# 311 "parser.ml"
  )
    | ARROW of (
# 7 "parser.mly"
       (Types.pre_info)
# 316 "parser.ml"
  )
    | AND of (
# 9 "parser.mly"
       (Types.pre_info)
# 321 "parser.ml"
  )
    | ADD of (
# 9 "parser.mly"
       (Types.pre_info)
# 326 "parser.ml"
  )
  
end

include MenhirBasics

let _eRR =
  MenhirBasics.Error

# 65 "parser.mly"
  
  open Types

  (** [fold_fun ps e] is the function [fun p1 -> ... -> fun pn -> e]. *)
  let fold_fun ps (e : expr info) : expr info =
    List.fold_right (fun p f -> dummy_info, Fun (p, f)) ps e

  let fold_fun_typ (tvs : var info list) (rt : gtyp info) : gtyp info =
    List.fold_right (fun (_,(_,t)) acc -> dummy_info, GFun (t,acc)) tvs rt

  (** [defold_list es] desugars List [e1; ... ; en] to [Cons (e1, ... Cons (en, Nil))] *)
  let rec defold_list es =
    match es with
    | [] -> dummy_info, Nil
    | h::t -> dummy_info, Bop ((dummy_info, Cons), h, defold_list t)

  (** [defold_plist ps] desugars PList [p1; ... ; pn] to [PCons (p1, ... Cons (pn, Nil))] *)
  let rec defold_plist ps =
    match ps with
    | [] -> dummy_info, PNil
    | p::t -> dummy_info, PCons (p, defold_plist t)

  let (<+>) i1 i2 = {
    filename = if i1.filename = "" then i2.filename else i1.filename;
    start_lin = i1.start_lin;
    end_lin = i2.end_lin;
    start_col = i1.start_col;
    end_col = i2.end_col;
  }


# 368 "parser.ml"

module Tables = struct
  
  include MenhirBasics
  
  let token2terminal : token -> int =
    fun _tok ->
      match _tok with
      | ADD _ ->
          63
      | AND _ ->
          62
      | ARROW _ ->
          61
      | ASSIGN _ ->
          60
      | AWAIT _ ->
          59
      | BEGIN _ ->
          58
      | BIND _ ->
          57
      | BOOL _ ->
          56
      | CASE _ ->
          55
      | CAT _ ->
          54
      | COLON _ ->
          53
      | COMMA _ ->
          52
      | CONS _ ->
          51
      | DEREF _ ->
          50
      | DIV _ ->
          49
      | ELSE _ ->
          48
      | END _ ->
          47
      | EOF _ ->
          46
      | EQ _ ->
          45
      | FALSE _ ->
          44
      | FUN _ ->
          43
      | GE _ ->
          42
      | GT _ ->
          41
      | HANDLE _ ->
          40
      | IF _ ->
          39
      | IN _ ->
          38
      | INCLUDE _ ->
          37
      | INT _ ->
          36
      | INT_LIT _ ->
          35
      | LBRACK _ ->
          34
      | LE _ ->
          33
      | LET _ ->
          32
      | LIST _ ->
          31
      | LPAREN _ ->
          30
      | LT _ ->
          29
      | MATCH _ ->
          28
      | MOD _ ->
          27
      | MUL _ ->
          26
      | NE _ ->
          25
      | NOT _ ->
          24
      | OR _ ->
          23
      | PIPE _ ->
          22
      | PROMISE _ ->
          21
      | RBRACK _ ->
          20
      | REC _ ->
          19
      | RECV _ ->
          18
      | REF _ ->
          17
      | RETURN _ ->
          16
      | RPAREN _ ->
          15
      | SELF _ ->
          14
      | SEMICOLON _ ->
          13
      | SEND _ ->
          12
      | SPAWN _ ->
          11
      | STR _ ->
          10
      | STRING _ ->
          9
      | SUB _ ->
          8
      | THEN _ ->
          7
      | TO _ ->
          6
      | TRUE _ ->
          5
      | UNIT _ ->
          4
      | VAR _ ->
          3
      | WILDCARD _ ->
          2
      | WITH _ ->
          1
  
  and error_terminal =
    0
  
  and token2value : token -> Obj.t =
    fun _tok ->
      match _tok with
      | ADD _v ->
          Obj.repr _v
      | AND _v ->
          Obj.repr _v
      | ARROW _v ->
          Obj.repr _v
      | ASSIGN _v ->
          Obj.repr _v
      | AWAIT _v ->
          Obj.repr _v
      | BEGIN _v ->
          Obj.repr _v
      | BIND _v ->
          Obj.repr _v
      | BOOL _v ->
          Obj.repr _v
      | CASE _v ->
          Obj.repr _v
      | CAT _v ->
          Obj.repr _v
      | COLON _v ->
          Obj.repr _v
      | COMMA _v ->
          Obj.repr _v
      | CONS _v ->
          Obj.repr _v
      | DEREF _v ->
          Obj.repr _v
      | DIV _v ->
          Obj.repr _v
      | ELSE _v ->
          Obj.repr _v
      | END _v ->
          Obj.repr _v
      | EOF _v ->
          Obj.repr _v
      | EQ _v ->
          Obj.repr _v
      | FALSE _v ->
          Obj.repr _v
      | FUN _v ->
          Obj.repr _v
      | GE _v ->
          Obj.repr _v
      | GT _v ->
          Obj.repr _v
      | HANDLE _v ->
          Obj.repr _v
      | IF _v ->
          Obj.repr _v
      | IN _v ->
          Obj.repr _v
      | INCLUDE _v ->
          Obj.repr _v
      | INT _v ->
          Obj.repr _v
      | INT_LIT _v ->
          Obj.repr _v
      | LBRACK _v ->
          Obj.repr _v
      | LE _v ->
          Obj.repr _v
      | LET _v ->
          Obj.repr _v
      | LIST _v ->
          Obj.repr _v
      | LPAREN _v ->
          Obj.repr _v
      | LT _v ->
          Obj.repr _v
      | MATCH _v ->
          Obj.repr _v
      | MOD _v ->
          Obj.repr _v
      | MUL _v ->
          Obj.repr _v
      | NE _v ->
          Obj.repr _v
      | NOT _v ->
          Obj.repr _v
      | OR _v ->
          Obj.repr _v
      | PIPE _v ->
          Obj.repr _v
      | PROMISE _v ->
          Obj.repr _v
      | RBRACK _v ->
          Obj.repr _v
      | REC _v ->
          Obj.repr _v
      | RECV _v ->
          Obj.repr _v
      | REF _v ->
          Obj.repr _v
      | RETURN _v ->
          Obj.repr _v
      | RPAREN _v ->
          Obj.repr _v
      | SELF _v ->
          Obj.repr _v
      | SEMICOLON _v ->
          Obj.repr _v
      | SEND _v ->
          Obj.repr _v
      | SPAWN _v ->
          Obj.repr _v
      | STR _v ->
          Obj.repr _v
      | STRING _v ->
          Obj.repr _v
      | SUB _v ->
          Obj.repr _v
      | THEN _v ->
          Obj.repr _v
      | TO _v ->
          Obj.repr _v
      | TRUE _v ->
          Obj.repr _v
      | UNIT _v ->
          Obj.repr _v
      | VAR _v ->
          Obj.repr _v
      | WILDCARD _v ->
          Obj.repr _v
      | WITH _v ->
          Obj.repr _v
  
  and default_reduction =
    (8, "\000\000<\001\000\000\000\000de\000c\000\000b\000\000\000\000\000\000g\000\000\000\000af\000\000\000\000\005K\007\000\n\011\000\006\000\t\bB\000\000SJ\000\000\000N\000\000\000L\000I\000\000UX\000VW\000_Z[\000\000\\Y\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000/\000\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0007\000\000\000\000\000\000\000k@\000j\000\000Q\000\000\000\000\000H\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000h\000\000i\000\000\000\000\000\000\000\021\000D5\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000O\000F\000>\000\002\000T")
  
  and error =
    (64, "\000\000\000\000\132\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\0004\160\016\0020\b\000\000\000\000\000\000\000\004\020\000\020\186\224\138\177\024 0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\186\224\138\177\024 0\000\000\000\000\000\000\000\000\020\186\224\138\177\024 0\020\186\224\138\177\024 0\000\000\000\000\000\000\000\000\020\186\224\138\177\024 0\020\186\224\138\177\024 0\020\186\224\138\177\024 0\020\186\224\138\177\024 0\020\186\224\138\177\024 0\020\187\224\138\177\024 0\000\000\000\000\000\000\000\0004\160\016\0020\b\000\000\000\000\000\000\000\004\020\000\020\186\224\138\177\024 0\020\"\b\0020\b\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\186\224\138\177\024 0\020\186\224\138\177\024 0\000\000\000\002\000\000\000\0004\160\000\0020\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0004\161\000\0020\b\000\000\000\000\000\000\000\000\000\0004\160\b\0020\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\b\000\000\000\016\0004\160\000\0020\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0004\160\000\0020\b\000\000\000\005\b\000\000\000\028\004\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\0004\160\000\0020\b\000\000\000\001\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000\b@\000\002\b\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b@\000\002\b\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001D!\000\128\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b@\000\002\b\000\000\128\000\001D!\000\132\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b@\000\002\b\000\000\128\000\001D!\000\132\000\004\000\001D!\000\132\000\004\000\000\000\000\000\000\000\004\020\186\224\138\177\024 0\020\186\224\138\177\024 04\160\000\0020\b\000\0004\161\000\0020\b\000\000\000\000\000\000\000\000\028\000\000\000\000\000\000\004\000\000\020\186\224\138\177\024 0\000\000\000\000\000\000\000\000\000\132\003tBdRK\020\186\224\138\177\024 0C\133\003t\194g\219K\020\186\224\138\177\024 0C\133\003t\194g\219K\020\186\224\138\177\024 0\000\000\000\000\000\000\000\000W\167\003v\242o\219k\000\000\000\000\000\000\000\000\020\186\224\138\177\024 0C\133\003t\194g\219K\020\186\224\138\177\024 0C\133\003t\194g\219K\020\186\224\138\177\024 0C\133\003t\194g\219K\020\186\224\138\177\024 0C\133\003t\194g\219K\020\186\224\138\177\024 0C\133\003t\194g\219K\020\186\224\138\177\024 0C\133\003t\194g\219K\020\186\224\138\177\024 0C\133\003t\194g\219K\020\186\224\138\177\024 0C\133\003t\194g\219K\020\186\224\138\177\024 0C\133\003t\194g\219K\020\186\224\138\177\024 0C\133\003t\194g\219K\020\186\224\138\177\024 0C\133\003t\194g\219K\020\186\224\138\177\024 0C\133\003t\194g\219K\020\186\224\138\177\024 0C\133\003t\194g\219K\020\186\224\138\177\024 0C\133\003t\194g\219C\020\186\224\138\177\024 0C\133\003t\194g\219K\020\186\224\138\177\024 0C\133\003t\194g\219K\020\186\224\138\177\024 0C\133\003t\194g\219K\000\000\000\000\000\004\000\000\020\186\224\138\177\024 0\000\132\003tBdRK\020\186\224\138\177\024 0C\133\003t\194g\219K\000\000\000\000\000\000\000\000C\133\003t\194g\219K\001\132\003t@dRK\020\186\224\138\177\024 0\000\132\003t@d\210K\020\186\224\138\177\024 0C\133\003t\194g\219K\000\132\003t@eRK\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\020&\b\0020\b\000 \020\"\000\0020\b\000 \000\000\000\000\000\000\000\000\000\132\003tBdRK\020\186\224\138\177\024 0C\133\003t\194g\219K\000\000\000\002\000\000\020\000\000\000\000\002\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\b@\000\002\b\000\000\128\000\000D!\000\132\000\004\020\186\224\138\177\024 0\000\132\003tBdRK\020\186\224\138\177\024 0C\133\003t\194g\219K\016\000\000\000\000\000\000\000\000\000\000\002\000\000\004\000\b@\000\002\b\000\000\128\000\000D!\000\132\000\004\020\186\224\138\177\024 0\000\132\003tBdRK\020\186\224\138\177\024 0C\133\003t\194g\219K\000\000\000\000\000\000\004\000\b@\000\002\b\000\000\128\000\000D!\000\132\000\004\020\186\224\138\177\024 0\000\132\003tBdRK\020\186\224\138\177\024 0C\133\003t\194g\219K4\161\000\0020\b\000\000\000\000\000\000\000\004\020\000\020\186\224\138\177\024 0\000\132\003tBdRK\020\186\224\138\177\024 0C\133\003t\194g\219K\000\000\000\000\000\004\000\000\020\186\224\138\177\024 0\000\132\003tBdRK\020\186\224\138\177\024 0C\133\003t\194g\219K\000\000\000\000\000\004\000\000\020\186\224\138\177\024 0\000\132\003tBdRK\020\186\224\138\177\024 0C\133\003t\194g\219K\000\133\003t@dZK\000\000\000\000\000\000\000\000\020\186\224\138\177\024 0\000\133\003t@dRK\000\000\000\000\000\000\000\000@\132\003t@dRK\000\000\000\000\000\000\001\0004\160\000\0020\b\000\000\000\000\000\000\000\000\016\004\020\186\224\138\177\024 0\000\132\003t@eSK\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000C\133\003t\194g\219KC\133\003t\194g\219KC\133\003t\194g\219K\002\132\003t@dRK\020\186\224\138\177\024 0C\133\003t\194g\219K@\132\003t@dRK\020\186\224\138\177\024 0C\133\003t\194g\219KC\133\003t\194g\219K\000\132\003t\192fRK\000\000\000\002\000\000\020\000\000\000\000\000\000\000\004\000\b@\000\002\b\000\000\128\000\000D!\000\132\000\004\020\186\224\138\177\024 0\000\132\003t\192fRK\016\000\000\000\000\000\000\000\000\000\000\002\000\000\004\000\b@\000\002\b\000\000\128\000\000D!\000\132\000\004\020\186\224\138\177\024 0\000\132\003t\192fRK\000\000\000\000\000\000\004\000\b@\000\002\b\000\000\128\000\000D!\000\132\000\004\020\186\224\138\177\024 0\000\132\003t\192fRK4\161\000\0020\b\000\000\000\000\000\000\000\004\020\000\020\186\224\138\177\024 0\000\132\003t\192fRK\000\000\000\000\000\004\000\000\020\186\224\138\177\024 0\000\132\003t\192fRK\000\000\000\000\000\004\000\000\020\186\224\138\177\024 0\000\132\003t\192fRK\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132\000\000\000\000\000\000\000\000\000\000\000\020\186\224\138\177\024 0\000\000\000\000\000\000\000\000\000\132\003t@fRK\000\000\000\000\000\000\000\000")
  
  and start =
    2
  
  and action =
    ((16, "\000#\000\002\000\000\000\000\000\019\000\132\000G\016J\000\000\000\000\016J\000\000\016J\016J\000\000\016J\016J\016J\016J\016J\016J\000\000\000\248\000\031\016J\000\003\000\000\000\000\016J\016J\000\024\001l\000\000\000\000\000\000\000T\000\000\000\000\001l\000\000\019\252\000\000\000\000\000\000\000\025\001l\000\000\000\000\001l\019\192\000t\000\000\000\030\001l\000\025\000\000\000\146\000\000\000P\000f\000\000\000\000\000f\000\000\000\000\004\160\000\000\000\000\000\000\000f\003D\000\000\000\000\000f\003\184\004,\000B\016J\016J\002\200\001l\000P\000h\016J\000\000\016\150\016J\000r\016J\000\230\016J\000\000\000\003\000\000\016J\001Z\016J\001\206\016J\002B\016J\002\182\016J\003*\016J\003\158\016J\004\018\016J\004\134\016J\004\250\016J\005n\016J\005\226\016J\006V\016J\006\202\016J\015\218\016J\007>\016J\007\178\016J\b&\000\140\016J\016\240\016J\b\154\000\000\t\014\016\150\016J\016\150\016J\t\130\016\240\000\000\000\000\000\196\000\000\016J\000\003\000\000\017D\016J\t\246\000,\000\166\000\000\000\142\000f\004\160\016J\017\152\016J\nj\001\b\001d\000f\005\020\016J\017\236\016J\n\222\000\172\000f\005\136\016J\018@\016J\011R\001\224\000\160\016J\018\148\016J\011\198\000\200\016J\018\232\016J\012:\000\202\016J\019<\016J\012\174\016\150\000\000\016J\019\162\000\000\017D\000\188\001l\000E\016J\016\150\000\206\000\000\001\016\000\000\000\000\r\"\r\150\014\n\017D\016J\014~\017\152\016J\014\242\015f\016\150\000,\000\196\000f\005\252\016J\016\240\001*\001\142\000f\006p\016J\017D\000\204\000f\006\228\016J\017\152\002T\000\240\016J\017\236\001\006\016J\018@\001\018\016J\018\148\001\030\000\000\000\006\000\000\000#\000\000\016J\000\000\018\232\000\000"), (16, "\000\233\000\182\000\"\000\222\000&\000\233\000\233\000\233\001E\000.\000\030\000\n\000\233\000:\000\233\000\241\000\017\000\194\000\017\000\249\000\006\000\233\000\233\000\022\000\233\000\233\000\233\003&\000\233\000R\000b\000\233\000\233\000f\000j\000\022\000\017\000\233\000\017\000\194\000\233\000\233\000~\000n\000\233\000\233\000\233\000\233\000\233\001\017\000\233\000\233\000~\000\233\000\233\000\242\000\233\000r\000\137\000\233\000\246\000\233\000\233\000\137\000\137\000\137\000\194\000\214\000\026\003n\000\137\000\138\000\137\001)\000\142\001)\000\150\000\146\000\206\000\137\000\137\000\250\000\137\001b\001z\003\134\000\137\000\254\000\230\000\137\000\137\000\194\000\214\000\238\0016\000\137\003\178\001N\000\137\000\137\000\162\000\166\000\137\000\137\000\137\000\137\001\130\001\002\000\137\000\137\000\170\001j\000\137\000~\000\137\002\006\000\141\000\137\002B\000\137\000\137\000\141\000\141\000\141\002n\002\202\000^\002^\000\141\000\138\000\141\000\021\000\142\000\021\000\150\002\138\001\025\000\141\000\141\002\170\000\141\000\141\000\141\002\134\000\141\002\222\002\242\000\141\000\141\003\030\0032\003v\003\138\000\141\002\194\003\162\000\141\000\141\000\162\000\166\000\141\000\141\000\141\000\141\000\141\003\186\000\141\000\141\000\170\001j\000\141\000\021\000\141\000\021\000\149\000\141\003\198\000\141\000\141\000\149\000\149\000\149\003\210\001\t\000\130\000\134\000\149\000\138\000\149\003\223\000\142\003\030\000\150\000\000\000\000\000\149\000\149\000\158\000\149\000\149\000\149\000\000\000\149\000\000\000\000\000\149\000\149\000\000\000~\000\000\000\000\000\149\000\154\000\000\000\149\000\149\000\162\000\166\000\149\000\149\000\149\000\149\000\149\000\000\000\149\000\149\000\170\001j\000\149\000~\000\149\002\142\000\145\000\149\000\000\000\149\000\149\000\145\000\145\000\145\000\000\000\000\000\130\000\134\000\145\000\138\000\145\000\000\000\142\000\000\000\150\000\000\003\142\000\145\000\145\002\198\000\145\000\145\000\145\000\000\000\145\000\000\000\000\000\145\000\145\000\000\000\000\000\000\000\000\000\145\000\154\000\000\000\145\000\145\000\162\000\166\000\145\000\145\000\145\000\145\000\145\000\000\000\145\000\145\000\170\001j\000\145\000\000\000\145\000\000\000\129\000\145\000\000\000\145\000\145\000\129\000\129\001Z\000\000\000\000\000\130\000\134\000\129\000\138\000\129\000\000\000\142\000\000\000\150\000\000\000\000\000\129\001\146\003\182\001\154\001b\001z\000\000\001\162\000\000\000\000\000\129\001\178\000\000\000\000\000\000\000\000\000\129\000\154\000\000\001\186\001\194\000\162\000\166\001\202\000\129\000\129\000\129\001\130\000\000\001\218\000\129\000\170\001j\000\129\000\000\000\129\000\000\000\157\001\226\000\000\001\210\001\170\000\157\000\157\001Z\000\000\000\000\000\130\000\134\000\157\000\138\000\157\000\000\000\142\000\000\000\150\000\000\000\000\000\157\000\157\000\000\001\154\001b\001z\000\000\001\162\000\000\000\000\000\157\001\178\000\000\000\000\000\000\000\000\000\157\001B\000\000\001\186\001\194\000\162\000\166\001\202\000\157\000\157\000\157\001\130\000\000\000\157\000\157\000\170\001j\000\157\000\000\000\157\000\000\000\181\000\157\000\000\001\210\001\170\000\181\000\181\001Z\000\000\000\000\000\000\000\000\000\181\000\000\000\181\000\000\000\000\000\000\000\000\000\000\000\000\000\181\000\181\000\000\000\181\001b\001z\001q\001\162\001\014\000\000\000\181\001\178\001\018\000\000\000\000\000\000\000\181\001q\000\000\001\186\001\194\000\000\001\030\000\181\000\181\000\181\000\181\001\130\000\000\000\181\000\181\001\"\001j\000\181\000\000\000\181\001q\000\161\000\181\000\000\000\181\001\170\000\161\000\161\001Z\000\000\000\000\000\000\000\000\000\161\000\000\000\161\001q\000\000\000\000\000\000\000\000\000\000\000\161\000\161\000\000\000\161\001b\001z\001u\000\161\001\014\000\000\000\161\000\161\001\018\000\000\000\000\000\000\000\161\001\022\000\000\000\161\000\161\000\000\001\030\000\161\000\161\000\161\000\161\001\130\000\000\000\161\000\161\001\"\001j\000\161\000\000\000\161\001u\000\133\000\161\000\000\000\161\001\170\000\133\000\133\000\133\000\000\000\000\000\000\000\000\000\133\000\000\000\133\001&\000\000\000\000\000\000\000\000\000\000\000\133\000\133\000\000\000\133\001b\001z\001}\000\133\001\014\000\000\000\133\000\133\001\018\000\000\000\000\000\000\000\133\001\022\000\000\000\133\000\133\000\000\001\030\000\133\000\133\000\133\000\133\001\130\000\000\000\133\000\133\001\"\001j\000\133\000\000\000\133\001}\000\165\000\133\000\000\000\133\000\133\000\165\000\165\001Z\000\000\000\000\000\000\000\000\000\165\000\000\000\165\001&\000\000\000\000\000\000\000\000\000\000\000\165\000\165\000\000\000\165\001b\001z\001\n\000\165\001\014\000\000\000\165\000\165\001\018\000\000\000\000\000\000\000\165\001\022\000\000\000\165\000\165\000\000\001\030\000\165\000\165\000\165\000\165\001\130\000\000\000\165\000\165\001\"\001j\000\165\000\000\000\165\002v\000\169\000\165\000\000\000\165\001\170\000\169\000\169\001Z\000\000\000\000\000\000\000\000\000\169\000\000\000\169\001&\000\000\000\000\000\000\000\000\000\000\000\169\000\169\000\000\000\169\001b\001z\000\000\000\169\001\014\000\000\000\169\000\169\001\018\000\000\000\000\000\000\000\169\001\022\000\000\000\169\000\169\000\000\001\030\000\169\000\169\000\169\000\169\001\130\000\000\000\169\000\169\001\"\001j\000\169\000\000\000\169\002\150\000\173\000\169\000\000\000\169\001\170\000\173\000\173\001Z\000\000\000\000\000\000\000\000\000\173\000\000\000\173\001&\000\000\000\000\000\000\000\000\000\000\000\173\000\173\000\000\000\173\001b\001z\000\000\000\173\001\014\000\000\000\173\000\173\001\018\000\000\000\000\000\000\000\173\001\022\000\000\000\173\000\173\000\000\001\030\000\173\000\173\000\173\000\173\001\130\000\000\000\173\000\173\001\"\001j\000\173\000\000\000\173\002\178\000\177\000\173\000\000\000\173\001\170\000\177\000\177\001Z\000\000\000\000\000\000\000\000\000\177\000\000\000\177\001&\000\000\000\000\000\000\000\000\000\000\000\177\000\177\000\000\000\177\001b\001z\000\000\001\162\001\014\000\000\000\177\001\178\001\018\000\000\000\000\000\000\000\177\001\022\000\000\001\186\001\194\000\000\001\030\000\177\000\177\000\177\000\177\001\130\000\000\000\177\000\177\001\"\001j\000\177\000\000\000\177\003~\000\153\000\177\000\000\000\177\001\170\000\153\000\153\001Z\000\000\000\000\000\000\000\000\000\153\000\000\000\153\001&\000\000\000\000\000\000\000\000\000\000\000\153\000\153\000\000\001\154\001b\001z\000\000\001\162\001\014\000\000\000\153\001\178\001\018\000\000\000\000\000\000\000\153\001\022\000\000\001\186\001\194\000\000\001\030\001\202\000\153\000\153\000\153\001\130\000\000\000\153\000\153\001\"\001j\000\153\000\000\000\153\003\150\000\193\000\153\000\000\000\153\001\170\000\193\000\193\001Z\000\000\000\000\000\000\000\000\000\193\000\000\000\193\001&\000\000\000\000\000\000\000\000\000\000\000\193\001\146\000\000\001\154\001b\001z\000\000\001\162\001\014\000\000\000\193\001\178\001\018\000\000\000\000\000\000\000\193\001\022\000\000\001\186\001\194\000\000\001\030\001\202\000\193\000\193\000\193\001\130\000\000\001\218\000\193\001\"\001j\000\193\000\000\000\193\003\170\000\189\000\193\000\000\001\210\001\170\000\189\000\189\001Z\000\000\000\000\000\000\000\000\001\138\000\000\000\189\001&\000\000\000\000\000\000\000\000\000\000\000\189\001\146\000\000\001\154\001b\001z\000\000\001\162\000\000\000\000\000\189\001\178\000\000\000\000\000\000\000\000\000\189\000\000\000\000\001\186\001\194\000\000\000\000\001\202\000\189\000\189\000\189\001\130\000\000\001\218\000\189\000\000\001j\000\189\000\000\000\189\000\000\000m\001\226\000\000\001\210\001\170\000m\000m\001Z\000\000\000\000\000\000\000\000\001\138\000\000\000m\000\000\000\000\000\000\000\000\000\000\000\000\001\234\001\146\000\000\001\154\001b\001z\000\000\001\162\000\000\000\000\000m\001\178\000\000\000\000\000\000\000\000\000m\000\000\000\000\001\186\001\194\000\000\000\000\001\202\000m\000m\000m\001\130\000\000\001\218\000m\000\000\001j\000m\000\000\001\250\000\000\000\201\001\226\000\000\001\210\001\170\000\201\000\201\001Z\000\000\000\000\000\000\000\000\001\138\000\000\000\201\000\000\000\000\000\000\000\000\000\000\000\000\000\201\001\146\000\000\001\154\001b\001z\000\000\001\162\000\000\000\000\000\201\001\178\000\000\000\000\000\000\000\000\000\201\000\000\000\000\001\186\001\194\000\000\000\000\001\202\000\201\000\201\000\201\001\130\000\000\001\218\000\201\000\000\001j\000\201\000\000\000\201\000\000\000q\001\226\000\000\001\210\001\170\000q\000q\001Z\000\000\000\000\000\000\000\000\001\138\000\000\000q\000\000\000\000\000\000\000\000\000\000\000\000\001\234\001\146\000\000\001\154\001b\001z\000\000\001\162\000\000\000\000\000q\001\178\000\000\000\000\000\000\000\000\000q\000\000\000\000\001\186\001\194\000\000\000\000\001\202\000q\000q\000q\001\130\000\000\001\218\000q\000\000\001j\000q\000\000\001\250\000\000\000U\001\226\000\000\001\210\001\170\000U\000U\001Z\000\000\000\000\000\000\000\000\001\138\000\000\000U\000\000\000\000\000\000\000\000\000\000\000\000\001\234\001\146\000\000\001\154\001b\001z\000\000\001\162\000\000\000\000\000U\001\178\000\000\000\000\000\000\000\000\000U\000\000\000\000\001\186\001\194\000\000\000\000\001\202\000U\000U\000U\001\130\000\000\001\218\000U\000\000\001j\000U\000\000\001\250\000\000\000M\001\226\000\000\001\210\001\170\000M\000M\001Z\000\000\000\000\000\000\000\000\001\138\000\000\000M\000\000\000\000\000\000\000\000\000\000\000\000\001\234\001\146\000\000\001\154\001b\001z\000\000\001\162\000\000\000\000\000M\001\178\000\000\000\000\000\000\000\000\000M\000\000\000\000\001\186\001\194\000\000\000\000\001\202\000M\000M\000M\001\130\000\000\001\218\000M\000\000\001j\000M\000\000\001\250\000\000\000]\001\226\000\000\001\210\001\170\000]\000]\001Z\000\000\000\000\000\000\000\000\001\138\000\000\000]\000\000\000\000\000\000\000\000\000\000\000\000\001\234\001\146\000\000\001\154\001b\001z\000\000\001\162\000\000\000\000\000]\001\178\000\000\000\000\000\000\000\000\000]\000\000\000\000\001\186\001\194\000\000\000\000\001\202\000]\000]\000]\001\130\000\000\001\218\000]\000\000\001j\000]\000\000\001\250\000\000\000i\001\226\000\000\001\210\001\170\000i\000i\001Z\000\000\000\000\000\000\000\000\001\138\000\000\000i\000\000\000\000\000\000\000\000\000\000\000\000\001\234\001\146\000\000\001\154\001b\001z\000\000\001\162\000\000\000\000\000i\001\178\000\000\000\000\000\000\000\000\000i\000\000\000\000\001\186\001\194\000\000\000\000\001\202\000i\000i\000i\001\130\000\000\001\218\000i\000\000\001j\000i\000\000\001\250\000\000\000\225\001\226\000\000\001\210\001\170\000\225\000\225\001Z\000\000\000\000\000\000\000\000\001\138\000\000\000\225\000\000\000\000\000\000\000\000\000\000\000\000\001\234\001\146\000\000\001\154\001b\001z\000\000\001\162\000\000\000\000\000\225\001\178\000\000\000\000\000\000\000\000\000\225\000\000\000\000\001\186\001\194\000\000\000\000\001\202\000\225\000\225\000\225\001\130\000\000\001\218\000\225\000\000\001j\000\225\000\000\001\250\000\000\000\229\001\226\000\000\001\210\001\170\000\229\000\229\001Z\000\000\000\000\000\000\000\000\001\138\000\000\000\229\000\000\000\000\000\000\000\000\000\000\000\000\001\234\001\146\000\000\001\154\001b\001z\000\000\001\162\000\000\000\000\000\229\001\178\000\000\000\000\000\000\000\000\000\229\000\000\000\000\001\186\001\194\000\000\000\000\001\202\000\229\000\229\000\229\001\130\000\000\001\218\000\229\000\000\001j\000\229\000\000\001\250\000\000\000Y\001\226\000\000\001\210\001\170\000Y\000Y\001Z\000\000\000\000\000\000\000\000\001\138\000\000\000Y\000\000\000\000\000\000\000\000\000\000\000\000\001\234\001\146\000\000\001\154\001b\001z\000\000\001\162\000\000\000\000\000Y\001\178\000\000\000\000\000\000\000\000\000Y\000\000\000\000\001\186\001\194\000\000\000\000\001\202\000Y\000Y\000Y\001\130\000\000\001\218\000Y\000\000\001j\000Y\000\000\001\250\000\000\000a\001\226\000\000\001\210\001\170\000a\000a\001Z\000\000\000\000\000\000\000\000\001\138\000\000\000a\000\000\000\000\000\000\000\000\000\000\000\000\001\234\001\146\000\000\001\154\001b\001z\000\000\001\162\000\000\000\000\000a\001\178\000\000\000\000\000\000\000\000\000a\000\000\000\000\001\186\001\194\000\000\000\000\001\202\000a\000a\000a\001\130\000\000\001\218\000a\000\000\001j\000a\000\000\001\250\000\000\000e\001\226\000\000\001\210\001\170\000e\000e\001Z\000\000\000\000\000\000\000\000\001\138\000\000\000e\000\000\000\000\000\000\000\000\000\000\000\000\001\234\001\146\000\000\001\154\001b\001z\000\000\001\162\000\000\000\000\000e\001\178\000\000\000\000\000\000\000\000\000e\000\000\000\000\001\186\001\194\000\000\000\000\001\202\000e\000e\000e\001\130\000\000\001\218\000e\000\000\001j\000e\000\000\001\250\000\000\000y\001\226\000\000\001\210\001\170\000y\000y\001Z\000\000\000\000\000\000\000\000\000y\000\000\000y\000\000\000\000\000\000\000\000\000\000\000\000\000y\001\146\000\000\001\154\001b\001z\000\000\001\162\000\000\000\000\000y\001\178\000\000\000\000\000\000\000\000\000y\000\000\000\000\001\186\001\194\000\000\000\000\001\202\000y\000y\000y\001\130\000\000\001\218\000y\000\000\001j\000y\000\000\000y\000\000\000\213\000y\000\000\001\210\001\170\000\213\000\213\000\213\000\000\000\000\000\000\000\000\000\213\000\000\000\213\000\000\000\000\000\000\000\000\000\000\000\000\000\213\000\213\000\000\000\213\000\213\000\213\000\000\000\213\000\000\000\000\000\213\000\213\000\000\000\000\000\000\000\000\000\213\000\000\000\000\000\213\000\213\000\000\000\000\000\213\000\213\000\213\000\213\000\213\000\000\000\213\000\213\000\000\001j\000\213\000\000\000\213\000\000\000\221\000\213\000\000\000\213\000\213\000\221\000\221\001Z\000\000\000\000\000\000\000\000\000\221\000\000\000\221\000\000\000\000\000\000\000\000\000\000\000\000\000\221\001\146\000\000\001\154\001b\001z\000\000\001\162\000\000\000\000\000\221\001\178\000\000\000\000\000\000\000\000\000\221\000\000\000\000\001\186\001\194\000\000\000\000\001\202\000\221\000\221\000\221\001\130\000\000\001\218\000\221\000\000\001j\000\221\000\000\000\221\000\000\000u\000\221\000\000\001\210\001\170\000u\000u\001Z\000\000\000\000\000\000\000\000\000u\000\000\000u\000\000\000\000\000\000\000\000\000\000\000\000\000u\001\146\000\000\001\154\001b\001z\000\000\001\162\000\000\000\000\000u\001\178\000\000\000\000\000\000\000\000\000u\000\000\000\000\001\186\001\194\000\000\000\000\001\202\000u\000u\000u\001\130\000\000\001\218\000u\000\000\001j\000u\000\000\000u\000\000\000}\000u\000\000\001\210\001\170\000}\000}\001Z\000\000\000\000\000\000\000\000\000}\000\000\000}\000\000\000\000\000\000\000\000\000\000\000\000\000}\001\146\000\000\001\154\001b\001z\000\000\001\162\000\000\000\000\000}\001\178\000\000\000\000\000\000\000\000\000}\000\000\000\000\001\186\001\194\000\000\000\000\001\202\000}\000}\000}\001\130\000\000\001\218\000}\000\000\001j\000}\000\000\000}\000\000\000\205\000}\000\000\001\210\001\170\000\205\000\205\000\205\000\000\000\000\000\000\000\000\000\205\000\000\000\205\000\000\000\000\000\000\000\000\000\000\000\000\000\205\000\205\000\000\000\205\001b\001z\000\000\000\205\000\000\000\000\000\205\000\205\000\000\000\000\000\000\000\000\000\205\000\000\000\000\000\205\000\205\000\000\000\000\000\205\000\205\000\205\000\205\001\130\000\000\000\205\000\205\000\000\001j\000\205\000\000\000\205\000\000\000\197\000\205\000\000\000\205\000\205\000\197\000\197\001Z\000\000\000\000\000\000\000\000\000\197\000\000\000\197\000\000\000\000\000\000\000\000\000\000\000\000\000\197\001\146\000\000\001\154\001b\001z\000\000\001\162\000\000\000\000\000\197\001\178\000\000\000\000\000\000\000\000\000\197\000\000\000\000\001\186\001\194\000\000\000\000\001\202\000\197\000\197\000\197\001\130\000\000\001\218\000\197\000\000\001j\000\197\000\000\000\197\000\000\000\"\000\000\000&\001\210\001\170\000*\000\000\000.\0002\0006\002J\000:\000V\000>\000B\000F\000\000\001=\000\000\000\000\000\000\000J\000\000\000\000\000\000\000N\000\000\000R\000\000\000Z\000\000\000f\000j\000\000\000\000\000\000\000v\000\000\000\000\000\000\000z\000n\002\"\001Z\000\000\000\000\000\000\001:\001\138\000\000\003\006\000\000\000\000\000\000\000\000\000r\001>\001\234\001\146\000\000\001\154\001b\001z\000\000\001\162\000\000\000\000\0005\001\178\000\000\000\000\000\000\000\000\001\242\000\000\000\000\001\186\001\194\000\000\000\000\001\202\0005\000-\002*\001\130\000\000\001\218\003\n\001Z\001j\000-\000\000\001\250\001\138\000\000\001\226\000\000\001\210\001\170\000\000\000\000\000\000\001\234\001\146\000\000\001\154\001b\001z\000\000\001\162\000\000\000\000\000A\001\178\000\000\000\000\000\000\000\000\002\014\000\000\000\000\001\186\001\194\003\026\000\000\001\202\000A\0026\003R\001\130\001Z\001\218\000\000\000\000\001j\001\138\000\000\001\250\000\000\000\000\001\226\000\000\001\210\001\170\001\234\001\146\000\000\001\154\001b\001z\000\000\001\162\000\000\000\000\000E\001\178\000\000\000\000\000\000\000\000\002V\000\000\000\000\001\186\001\194\003^\000\000\001\202\000E\000\000\000\000\001\130\001Z\001\218\000\000\000\000\001j\001\138\000\000\001\250\000\000\000\000\001\226\000\000\001\210\001\170\001\234\001\146\000\000\001\154\001b\001z\000\000\001\162\000\000\000\000\000I\001\178\000\000\000\000\000\000\000\000\002~\000\000\000\000\001\186\001\194\000\000\000\000\001\202\000I\000\000\000\000\001\130\001Z\001\218\000\000\000\000\001j\001\138\000\000\001\250\000\000\000\000\001\226\000\000\001\210\001\170\001\234\001\146\000\000\001\154\001b\001z\000\000\001\162\000\000\000\000\0001\001\178\000\000\000\000\000\000\000\000\002\158\000\000\000\000\001\186\001\194\000\000\000\000\001\202\0001\000\000\000\000\001\130\001Z\001\218\000\000\000\000\001j\001\138\000\000\001\250\000\000\000\000\001\226\000\000\001\210\001\170\001\234\001\146\000\000\001\154\001b\001z\000\000\001\162\000\000\000\000\0009\001\178\000\000\000\000\000\000\000\000\002\186\000\000\000\000\001\186\001\194\000\000\000\000\001\202\0009\000\000\000\000\001\130\001Z\001\218\000\000\000\000\001j\001\138\000\000\001\250\000\000\000\000\001\226\000\000\001\210\001\170\001\234\001\146\000\000\001\154\001b\001z\000\000\001\162\000\000\000\000\000=\001\178\000\000\000\000\000\000\000\000\002\210\000\000\000\000\001\186\001\194\000\000\000\000\001\202\000=\000\000\000\000\001\130\001Z\001\218\000\000\000\000\001j\001\138\000\000\001\250\000\000\000\000\001\226\000\000\001\210\001\170\001\234\001\146\000\000\001\154\001b\001z\000\000\001\162\000\000\000\000\000\000\001\178\000\000\000\000\000\000\000\000\002\230\000\000\000\000\001\186\001\194\000\000\000\000\001\202\003\255\000\000\000\000\001\130\001Z\001\218\000\000\000\000\001j\001\138\000\000\001\250\000\000\000\000\001\226\000\000\001\210\001\170\001\234\001\146\000\000\001\154\001b\001z\000\000\001\162\000\000\000\000\000\000\001\178\000\000\000\000\000\000\000\000\002\250\000\000\000\000\001\186\001\194\000\000\000\000\001\202\000\000\000\000\000\000\001\130\000\000\001\218\000\000\000\000\001j\000\000\000\000\001\250\000\000\001Z\001\226\000\000\001\210\001\170\001\138\000\000\003\018\000\000\000\000\000\000\000\000\000\000\000\000\001\234\001\146\000\000\001\154\001b\001z\0011\001\162\0011\000\000\000\000\001\178\000\000\0011\000\000\000\000\000\000\000\000\000\000\001\186\001\194\000\000\000\000\001\202\000\000\000\130\000\134\001\130\000\138\001\218\000\000\000\142\001j\000\150\000\000\001\250\000\000\000\000\001\226\000\000\001\210\001\170\000\000\001\001\000\194\0011\0011\000\000\000\000\000\000\000\000\000\000\000\000\000\154\0011\000\000\000\000\000\162\000\166\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\170"))
  
  and lhs =
    (8, "\001\000\022\022\021\021\021\021\021\021\021\020\019\019\019\019\019\019\019\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\018\017\016\016\015\015\014\014\r\r\012\012\011\011\n\t\t\t\t\t\b\007\007\006\006\005\004\004\004\004\004\004\004\004\004\004\004\003\002\002\002\002\002\002\002\002\002\002\002")
  
  and goto =
    ((16, "\0000\000\000\000\000\000\000\000\015\000\007\000\000\000(\000\000\000\000\000:\000\000\000@\000D\000\000\000F\000R\000T\000V\000X\000j\000\000\000\003\000\000\000p\000\016\000\000\000\000\000\130\000\132\000\019\000\140\000\000\000\000\000\000\000\000\000\000\000\000\001\250\000\000\000\n\000\000\000\000\000\000\000\000\000\142\000\000\000\000\002\002\000\000\000\000\000\000\000\000\002\004\000\000\000\000\000\000\000\000\000\000\000\026\000\000\000\000\000>\000\000\000\000\000\000\000\000\000\000\000\000\000\136\000\000\000\000\000\000\000\190\000\000\000\000\000\000\000\134\000\136\000$\000\146\000\000\000\000\000\158\000\000\000\000\000\182\000\000\000\186\000\000\000\188\000\000\000\200\000\000\000\192\000\000\000\202\000\000\000\204\000\000\000\206\000\000\000\208\000\000\000\230\000\000\000\250\000\000\000\252\000\000\000\254\000\000\001\000\000\000\001\n\000\000\001\012\000\000\001\016\000\000\001\022\000\000\001.\000\000\001:\000\000\001<\000\000\000\000\001@\000\000\001F\000\000\000\000\000\000\000\000\001J\000\000\001L\000\000\000\000\000\000\000\000\000\000\000\000\000\200\001H\000\000\000\000\001X\000\000\000\015\000\028\000\000\000\000\000\208\000\000\001^\000\000\001v\000\000\000\000\000L\000\212\000\000\001z\000\000\001|\000\000\000\000\000\254\000\000\001\136\000\000\001\138\000\000\000\146\000\000\001\140\000\000\001\142\000\000\000\000\001\152\000\000\001\166\000\000\000\000\001\186\000\000\001\188\000\000\000\000\000\000\001\190\000\000\000\000\000\000\000\174\002\006\000\000\001\200\000\000\000\000\000\000\000\238\000\000\000\000\000\000\000\000\000\000\000\000\001\202\000\000\000\000\001\204\000\000\000\000\000\000\0012\000\000\001\004\000\000\001\214\000\000\000\000\001r\001\016\000\000\001\216\000\000\000\000\001\020\000\000\001\238\000\000\000\146\000\000\001\250\000\000\000\000\001\252\000\000\000\000\002\006\000\000\000\000\000\000\001~\000\000\001\166\000\000\000\022\000\000\000\000\000\000"), (8, "\241M\183\153\155\247;\244;\188U,\249U-\143\254L030SU\144\153\1540;\129\255\146U\004]UBUU\2190\005\251]UUUU\218\153\170\215]\212\211]U]]U\210\209\208\198]]]]UUUU\193G9\149]9/];-UR\141\136\135\134]]]]00U0UUVUK\204]^UUUU\206\157X\165Z\\]`]]U]bdfh]]]]UUUU\172\207j\223UU]U\206\229U\234lnpr]]]]tvUx]]z]UU]U\153\221UUUU|\000\148\000]U~\128U\131]]\133]\138\140]\146]]U\151UU\159]\153\232]UUUU\000\250\000\161U\167\169]\249]]U\174\176\180\182]]]]\185UUU]\252\251\187UUU]\000\000\000UU\190\192\196\000]]]\203\214\217U]]]\225\231UU]]\000\000U5\000\000\23627\201]\000\240\243\0000]]\246000]"))
  
  and semantic_action =
    [|
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = v;
          MenhirLib.EngineTypes.startp = _startpos_v_;
          MenhirLib.EngineTypes.endp = _endpos_v_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let v : (
# 27 "parser.mly"
      (expr info)
# 675 "parser.ml"
        ) = Obj.magic v in
        let a : (
# 27 "parser.mly"
      (expr info)
# 680 "parser.ml"
        ) = Obj.magic a in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_v_ in
        let _v : (
# 27 "parser.mly"
      (expr info)
# 688 "parser.ml"
        ) = 
# 180 "parser.mly"
                  ( (fst a) <+> (fst v), App (a, v) )
# 692 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = v;
          MenhirLib.EngineTypes.startp = _startpos_v_;
          MenhirLib.EngineTypes.endp = _endpos_v_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let v : (
# 27 "parser.mly"
      (expr info)
# 713 "parser.ml"
        ) = Obj.magic v in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_v_ in
        let _endpos = _endpos_v_ in
        let _v : (
# 27 "parser.mly"
      (expr info)
# 721 "parser.ml"
        ) = 
# 181 "parser.mly"
                  ( v )
# 725 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 8 "parser.mly"
       (Types.pre_info)
# 746 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (
# 24 "parser.mly"
      (pat info)
# 754 "parser.ml"
        ) = 
# 154 "parser.mly"
                      ( i, PWild )
# 758 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let r : (
# 17 "parser.mly"
       (Types.pre_info)
# 785 "parser.ml"
        ) = Obj.magic r in
        let l : (
# 17 "parser.mly"
       (Types.pre_info)
# 790 "parser.ml"
        ) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v : (
# 24 "parser.mly"
      (pat info)
# 798 "parser.ml"
        ) = 
# 155 "parser.mly"
                      ( l <+> r, PUnit )
# 802 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 6 "parser.mly"
       (Types.pre_info)
# 823 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (
# 24 "parser.mly"
      (pat info)
# 831 "parser.ml"
        ) = 
# 156 "parser.mly"
                      ( i, PBool (i, true) )
# 835 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 6 "parser.mly"
       (Types.pre_info)
# 856 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (
# 24 "parser.mly"
      (pat info)
# 864 "parser.ml"
        ) = 
# 157 "parser.mly"
                      ( i, PBool (i, false) )
# 868 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 3 "parser.mly"
       (int Types.info)
# 889 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (
# 24 "parser.mly"
      (pat info)
# 897 "parser.ml"
        ) = 
# 158 "parser.mly"
                      ( fst i, PInt i )
# 901 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = u;
            MenhirLib.EngineTypes.startp = _startpos_u_;
            MenhirLib.EngineTypes.endp = _endpos_u_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let i : (
# 3 "parser.mly"
       (int Types.info)
# 928 "parser.ml"
        ) = Obj.magic i in
        let u : (
# 9 "parser.mly"
       (Types.pre_info)
# 933 "parser.ml"
        ) = Obj.magic u in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_u_ in
        let _endpos = _endpos_i_ in
        let _v : (
# 24 "parser.mly"
      (pat info)
# 941 "parser.ml"
        ) = 
# 159 "parser.mly"
                      ( u <+> fst i, PInt (fst i, -(snd i)) )
# 945 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : (
# 4 "parser.mly"
       (string Types.info)
# 966 "parser.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : (
# 24 "parser.mly"
      (pat info)
# 974 "parser.ml"
        ) = 
# 160 "parser.mly"
                      ( fst s, PString s )
# 978 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = p;
              MenhirLib.EngineTypes.startp = _startpos_p_;
              MenhirLib.EngineTypes.endp = _endpos_p_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let _3 : (
# 7 "parser.mly"
       (Types.pre_info)
# 1018 "parser.ml"
        ) = Obj.magic _3 in
        let p : (
# 24 "parser.mly"
      (pat info)
# 1023 "parser.ml"
        ) = Obj.magic p in
        let _1 : (
# 12 "parser.mly"
       (Types.pre_info)
# 1028 "parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : (
# 26 "parser.mly"
      (pat info * expr info)
# 1036 "parser.ml"
        ) = 
# 177 "parser.mly"
                           ( (p, e) )
# 1040 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = r;
              MenhirLib.EngineTypes.startp = _startpos_r_;
              MenhirLib.EngineTypes.endp = _endpos_r_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = l;
                MenhirLib.EngineTypes.startp = _startpos_l_;
                MenhirLib.EngineTypes.endp = _endpos_l_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = i;
                  MenhirLib.EngineTypes.startp = _startpos_i_;
                  MenhirLib.EngineTypes.endp = _endpos_i_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let _4 : (
# 9 "parser.mly"
       (Types.pre_info)
# 1086 "parser.ml"
        ) = Obj.magic _4 in
        let r : (
# 17 "parser.mly"
       (Types.pre_info)
# 1091 "parser.ml"
        ) = Obj.magic r in
        let l : (
# 17 "parser.mly"
       (Types.pre_info)
# 1096 "parser.ml"
        ) = Obj.magic l in
        let i : (
# 8 "parser.mly"
       (Types.pre_info)
# 1101 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e_ in
        let _v : (
# 23 "parser.mly"
      (defn info)
# 1109 "parser.ml"
        ) = 
# 110 "parser.mly"
    ( let pos = l <+> r in
      i <+> (fst e), DLet ((pos, ((pos, PUnit), (pos, GUnit))), e) )
# 1114 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = w;
              MenhirLib.EngineTypes.startp = _startpos_w_;
              MenhirLib.EngineTypes.endp = _endpos_w_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = i;
                MenhirLib.EngineTypes.startp = _startpos_i_;
                MenhirLib.EngineTypes.endp = _endpos_i_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let _3 : (
# 9 "parser.mly"
       (Types.pre_info)
# 1154 "parser.ml"
        ) = Obj.magic _3 in
        let w : (
# 8 "parser.mly"
       (Types.pre_info)
# 1159 "parser.ml"
        ) = Obj.magic w in
        let i : (
# 8 "parser.mly"
       (Types.pre_info)
# 1164 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e_ in
        let _v : (
# 23 "parser.mly"
      (defn info)
# 1172 "parser.ml"
        ) = 
# 113 "parser.mly"
    ( i <+> (fst e), DLet ((w, ((w, PWild), (w, GBot))), e) )
# 1176 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = p;
              MenhirLib.EngineTypes.startp = _startpos_p_;
              MenhirLib.EngineTypes.endp = _endpos_p_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = i;
                MenhirLib.EngineTypes.startp = _startpos_i_;
                MenhirLib.EngineTypes.endp = _endpos_i_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let _3 : (
# 9 "parser.mly"
       (Types.pre_info)
# 1216 "parser.ml"
        ) = Obj.magic _3 in
        let p : (
# 25 "parser.mly"
      (var info)
# 1221 "parser.ml"
        ) = Obj.magic p in
        let i : (
# 8 "parser.mly"
       (Types.pre_info)
# 1226 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e_ in
        let _v : (
# 23 "parser.mly"
      (defn info)
# 1234 "parser.ml"
        ) = 
# 114 "parser.mly"
                                ( i <+> (fst e), DLet (p,e) )
# 1238 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = p;
              MenhirLib.EngineTypes.startp = _startpos_p_;
              MenhirLib.EngineTypes.endp = _endpos_p_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = i;
                MenhirLib.EngineTypes.startp = _startpos_i_;
                MenhirLib.EngineTypes.endp = _endpos_i_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let _3 : (
# 9 "parser.mly"
       (Types.pre_info)
# 1278 "parser.ml"
        ) = Obj.magic _3 in
        let p : (
# 25 "parser.mly"
      (var info)
# 1283 "parser.ml"
        ) = Obj.magic p in
        let i : (
# 8 "parser.mly"
       (Types.pre_info)
# 1288 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e_ in
        let _v : (
# 23 "parser.mly"
      (defn info)
# 1296 "parser.ml"
        ) = 
# 115 "parser.mly"
                                ( i <+> (fst e), DLet (p,e) )
# 1300 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = tvs;
                  MenhirLib.EngineTypes.startp = _startpos_tvs_;
                  MenhirLib.EngineTypes.endp = _endpos_tvs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = f;
                    MenhirLib.EngineTypes.startp = _startpos_f_;
                    MenhirLib.EngineTypes.endp = _endpos_f_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = i;
                      MenhirLib.EngineTypes.startp = _startpos_i_;
                      MenhirLib.EngineTypes.endp = _endpos_i_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let _6 : (
# 9 "parser.mly"
       (Types.pre_info)
# 1358 "parser.ml"
        ) = Obj.magic _6 in
        let t : (
# 28 "parser.mly"
      (gtyp info)
# 1363 "parser.ml"
        ) = Obj.magic t in
        let _4 : (
# 17 "parser.mly"
       (Types.pre_info)
# 1368 "parser.ml"
        ) = Obj.magic _4 in
        let tvs : (Types.var Types.info list) = Obj.magic tvs in
        let f : (
# 5 "parser.mly"
       (string Types.info)
# 1374 "parser.ml"
        ) = Obj.magic f in
        let i : (
# 8 "parser.mly"
       (Types.pre_info)
# 1379 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e_ in
        let _v : (
# 23 "parser.mly"
      (defn info)
# 1387 "parser.ml"
        ) = 
# 117 "parser.mly"
    ( i <+> (fst e), DLet ((fst f, ((fst f, PVar f), fold_fun_typ tvs t)), fold_fun tvs e) )
# 1391 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = f;
                  MenhirLib.EngineTypes.startp = _startpos_f_;
                  MenhirLib.EngineTypes.endp = _endpos_f_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = i;
                      MenhirLib.EngineTypes.startp = _startpos_i_;
                      MenhirLib.EngineTypes.endp = _endpos_i_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let _6 : (
# 9 "parser.mly"
       (Types.pre_info)
# 1449 "parser.ml"
        ) = Obj.magic _6 in
        let t : (
# 28 "parser.mly"
      (gtyp info)
# 1454 "parser.ml"
        ) = Obj.magic t in
        let _4 : (
# 17 "parser.mly"
       (Types.pre_info)
# 1459 "parser.ml"
        ) = Obj.magic _4 in
        let f : (
# 5 "parser.mly"
       (string Types.info)
# 1464 "parser.ml"
        ) = Obj.magic f in
        let _2 : (
# 8 "parser.mly"
       (Types.pre_info)
# 1469 "parser.ml"
        ) = Obj.magic _2 in
        let i : (
# 8 "parser.mly"
       (Types.pre_info)
# 1474 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e_ in
        let _v : (
# 23 "parser.mly"
      (defn info)
# 1482 "parser.ml"
        ) = 
# 119 "parser.mly"
    ( i <+> (fst e), DLetRec (((fst f) <+> (fst t), ((fst f, PVar f),t)),e) )
# 1486 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = t;
              MenhirLib.EngineTypes.startp = _startpos_t_;
              MenhirLib.EngineTypes.endp = _endpos_t_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = tvs;
                  MenhirLib.EngineTypes.startp = _startpos_tvs_;
                  MenhirLib.EngineTypes.endp = _endpos_tvs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = f;
                    MenhirLib.EngineTypes.startp = _startpos_f_;
                    MenhirLib.EngineTypes.endp = _endpos_f_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = i;
                        MenhirLib.EngineTypes.startp = _startpos_i_;
                        MenhirLib.EngineTypes.endp = _endpos_i_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let _7 : (
# 9 "parser.mly"
       (Types.pre_info)
# 1550 "parser.ml"
        ) = Obj.magic _7 in
        let t : (
# 28 "parser.mly"
      (gtyp info)
# 1555 "parser.ml"
        ) = Obj.magic t in
        let _5 : (
# 17 "parser.mly"
       (Types.pre_info)
# 1560 "parser.ml"
        ) = Obj.magic _5 in
        let tvs : (Types.var Types.info list) = Obj.magic tvs in
        let f : (
# 5 "parser.mly"
       (string Types.info)
# 1566 "parser.ml"
        ) = Obj.magic f in
        let _2 : (
# 8 "parser.mly"
       (Types.pre_info)
# 1571 "parser.ml"
        ) = Obj.magic _2 in
        let i : (
# 8 "parser.mly"
       (Types.pre_info)
# 1576 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e_ in
        let _v : (
# 23 "parser.mly"
      (defn info)
# 1584 "parser.ml"
        ) = 
# 121 "parser.mly"
    ( i <+> (fst e), DLetRec (((fst f) <+> (fst t), ((fst f, PVar f),fold_fun_typ tvs t)), fold_fun tvs e) )
# 1588 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e3;
          MenhirLib.EngineTypes.startp = _startpos_e3_;
          MenhirLib.EngineTypes.endp = _endpos_e3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e2;
              MenhirLib.EngineTypes.startp = _startpos_e2_;
              MenhirLib.EngineTypes.endp = _endpos_e2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = e1;
                  MenhirLib.EngineTypes.startp = _startpos_e1_;
                  MenhirLib.EngineTypes.endp = _endpos_e1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = i;
                    MenhirLib.EngineTypes.startp = _startpos_i_;
                    MenhirLib.EngineTypes.endp = _endpos_i_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e3 : (Types.expr Types.info) = Obj.magic e3 in
        let _5 : (
# 11 "parser.mly"
       (Types.pre_info)
# 1640 "parser.ml"
        ) = Obj.magic _5 in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let _3 : (
# 11 "parser.mly"
       (Types.pre_info)
# 1646 "parser.ml"
        ) = Obj.magic _3 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let i : (
# 11 "parser.mly"
       (Types.pre_info)
# 1652 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e3_ in
        let _v : (Types.expr Types.info) = 
# 124 "parser.mly"
                                                    ( i <+> (fst e3), IfElse (e1, e2, e3) )
# 1660 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = cs;
            MenhirLib.EngineTypes.startp = _startpos_cs_;
            MenhirLib.EngineTypes.endp = _endpos_cs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = e1;
                MenhirLib.EngineTypes.startp = _startpos_e1_;
                MenhirLib.EngineTypes.endp = _endpos_e1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = m;
                  MenhirLib.EngineTypes.startp = _startpos_m_;
                  MenhirLib.EngineTypes.endp = _endpos_m_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let e : (
# 17 "parser.mly"
       (Types.pre_info)
# 1705 "parser.ml"
        ) = Obj.magic e in
        let cs : ((Types.pat Types.info * Types.expr Types.info) list) = Obj.magic cs in
        let _3 : (
# 13 "parser.mly"
       (Types.pre_info)
# 1711 "parser.ml"
        ) = Obj.magic _3 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let m : (
# 12 "parser.mly"
       (Types.pre_info)
# 1717 "parser.ml"
        ) = Obj.magic m in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_m_ in
        let _endpos = _endpos_e_ in
        let _v : (Types.expr Types.info) = 
# 125 "parser.mly"
                                                    ( m <+> e, Match (e1, cs) )
# 1725 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = tv;
              MenhirLib.EngineTypes.startp = _startpos_tv_;
              MenhirLib.EngineTypes.endp = _endpos_tv_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = f;
                MenhirLib.EngineTypes.startp = _startpos_f_;
                MenhirLib.EngineTypes.endp = _endpos_f_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let _3 : (
# 7 "parser.mly"
       (Types.pre_info)
# 1765 "parser.ml"
        ) = Obj.magic _3 in
        let tv : (
# 25 "parser.mly"
      (var info)
# 1770 "parser.ml"
        ) = Obj.magic tv in
        let f : (
# 7 "parser.mly"
       (Types.pre_info)
# 1775 "parser.ml"
        ) = Obj.magic f in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_f_ in
        let _endpos = _endpos_e_ in
        let _v : (Types.expr Types.info) = 
# 126 "parser.mly"
                                                    ( f <+> (fst e), Fun (tv, e) )
# 1783 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = r;
                  MenhirLib.EngineTypes.startp = _startpos_r_;
                  MenhirLib.EngineTypes.endp = _endpos_r_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = l;
                    MenhirLib.EngineTypes.startp = _startpos_l_;
                    MenhirLib.EngineTypes.endp = _endpos_l_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = i;
                      MenhirLib.EngineTypes.startp = _startpos_i_;
                      MenhirLib.EngineTypes.endp = _endpos_i_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let _6 : (
# 8 "parser.mly"
       (Types.pre_info)
# 1841 "parser.ml"
        ) = Obj.magic _6 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _4 : (
# 9 "parser.mly"
       (Types.pre_info)
# 1847 "parser.ml"
        ) = Obj.magic _4 in
        let r : (
# 17 "parser.mly"
       (Types.pre_info)
# 1852 "parser.ml"
        ) = Obj.magic r in
        let l : (
# 17 "parser.mly"
       (Types.pre_info)
# 1857 "parser.ml"
        ) = Obj.magic l in
        let i : (
# 8 "parser.mly"
       (Types.pre_info)
# 1862 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = 
# 128 "parser.mly"
    ( let pos = l <+> r in
      (i <+> (fst e2), Let ((pos, ((pos, PUnit), (pos, GUnit))), e1, e2)) )
# 1871 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = w;
                  MenhirLib.EngineTypes.startp = _startpos_w_;
                  MenhirLib.EngineTypes.endp = _endpos_w_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = i;
                    MenhirLib.EngineTypes.startp = _startpos_i_;
                    MenhirLib.EngineTypes.endp = _endpos_i_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let _5 : (
# 8 "parser.mly"
       (Types.pre_info)
# 1923 "parser.ml"
        ) = Obj.magic _5 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _3 : (
# 9 "parser.mly"
       (Types.pre_info)
# 1929 "parser.ml"
        ) = Obj.magic _3 in
        let w : (
# 8 "parser.mly"
       (Types.pre_info)
# 1934 "parser.ml"
        ) = Obj.magic w in
        let i : (
# 8 "parser.mly"
       (Types.pre_info)
# 1939 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = 
# 131 "parser.mly"
    ( (i <+> (fst e2), Let ((w, ((w, PWild), (w, GBot))), e1, e2)) )
# 1947 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = tv;
                  MenhirLib.EngineTypes.startp = _startpos_tv_;
                  MenhirLib.EngineTypes.endp = _endpos_tv_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = i;
                    MenhirLib.EngineTypes.startp = _startpos_i_;
                    MenhirLib.EngineTypes.endp = _endpos_i_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let _5 : (
# 8 "parser.mly"
       (Types.pre_info)
# 1999 "parser.ml"
        ) = Obj.magic _5 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _3 : (
# 9 "parser.mly"
       (Types.pre_info)
# 2005 "parser.ml"
        ) = Obj.magic _3 in
        let tv : (
# 25 "parser.mly"
      (var info)
# 2010 "parser.ml"
        ) = Obj.magic tv in
        let i : (
# 8 "parser.mly"
       (Types.pre_info)
# 2015 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = 
# 132 "parser.mly"
                                                    ( i <+> (fst e2), Let (tv, e1, e2) )
# 2023 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = tv;
                  MenhirLib.EngineTypes.startp = _startpos_tv_;
                  MenhirLib.EngineTypes.endp = _endpos_tv_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = i;
                    MenhirLib.EngineTypes.startp = _startpos_i_;
                    MenhirLib.EngineTypes.endp = _endpos_i_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let _5 : (
# 8 "parser.mly"
       (Types.pre_info)
# 2075 "parser.ml"
        ) = Obj.magic _5 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _3 : (
# 9 "parser.mly"
       (Types.pre_info)
# 2081 "parser.ml"
        ) = Obj.magic _3 in
        let tv : (
# 25 "parser.mly"
      (var info)
# 2086 "parser.ml"
        ) = Obj.magic tv in
        let i : (
# 8 "parser.mly"
       (Types.pre_info)
# 2091 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = 
# 133 "parser.mly"
                                                    ( i <+> (fst e2), Let (tv, e1, e2) )
# 2099 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = t;
                  MenhirLib.EngineTypes.startp = _startpos_t_;
                  MenhirLib.EngineTypes.endp = _endpos_t_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = tvs;
                      MenhirLib.EngineTypes.startp = _startpos_tvs_;
                      MenhirLib.EngineTypes.endp = _endpos_tvs_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = f;
                        MenhirLib.EngineTypes.startp = _startpos_f_;
                        MenhirLib.EngineTypes.endp = _endpos_f_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = i;
                          MenhirLib.EngineTypes.startp = _startpos_i_;
                          MenhirLib.EngineTypes.endp = _endpos_i_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let _8 : (
# 8 "parser.mly"
       (Types.pre_info)
# 2169 "parser.ml"
        ) = Obj.magic _8 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _6 : (
# 9 "parser.mly"
       (Types.pre_info)
# 2175 "parser.ml"
        ) = Obj.magic _6 in
        let t : (
# 28 "parser.mly"
      (gtyp info)
# 2180 "parser.ml"
        ) = Obj.magic t in
        let _4 : (
# 17 "parser.mly"
       (Types.pre_info)
# 2185 "parser.ml"
        ) = Obj.magic _4 in
        let tvs : (Types.var Types.info list) = Obj.magic tvs in
        let f : (
# 5 "parser.mly"
       (string Types.info)
# 2191 "parser.ml"
        ) = Obj.magic f in
        let i : (
# 8 "parser.mly"
       (Types.pre_info)
# 2196 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = 
# 135 "parser.mly"
    ( i <+> (fst e2), 
      Let (((fst f) <+> (fst t), ((fst f, PVar f), fold_fun_typ tvs t)),
          fold_fun tvs e1, e2) )
# 2206 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = tv;
                  MenhirLib.EngineTypes.startp = _startpos_tv_;
                  MenhirLib.EngineTypes.endp = _endpos_tv_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = i;
                    MenhirLib.EngineTypes.startp = _startpos_i_;
                    MenhirLib.EngineTypes.endp = _endpos_i_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let _5 : (
# 8 "parser.mly"
       (Types.pre_info)
# 2258 "parser.ml"
        ) = Obj.magic _5 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _3 : (
# 9 "parser.mly"
       (Types.pre_info)
# 2264 "parser.ml"
        ) = Obj.magic _3 in
        let tv : (
# 25 "parser.mly"
      (var info)
# 2269 "parser.ml"
        ) = Obj.magic tv in
        let i : (
# 8 "parser.mly"
       (Types.pre_info)
# 2274 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = 
# 138 "parser.mly"
                                                    ( i <+> (fst e2), Await (tv, e1, e2) )
# 2282 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = tv;
                  MenhirLib.EngineTypes.startp = _startpos_tv_;
                  MenhirLib.EngineTypes.endp = _endpos_tv_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = i;
                    MenhirLib.EngineTypes.startp = _startpos_i_;
                    MenhirLib.EngineTypes.endp = _endpos_i_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let _5 : (
# 8 "parser.mly"
       (Types.pre_info)
# 2334 "parser.ml"
        ) = Obj.magic _5 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _3 : (
# 9 "parser.mly"
       (Types.pre_info)
# 2340 "parser.ml"
        ) = Obj.magic _3 in
        let tv : (
# 25 "parser.mly"
      (var info)
# 2345 "parser.ml"
        ) = Obj.magic tv in
        let i : (
# 8 "parser.mly"
       (Types.pre_info)
# 2350 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = 
# 139 "parser.mly"
                                                    ( i <+> (fst e2), Await (tv, e1, e2) )
# 2358 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = i;
                MenhirLib.EngineTypes.startp = _startpos_i_;
                MenhirLib.EngineTypes.endp = _endpos_i_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let _3 : (
# 14 "parser.mly"
       (Types.pre_info)
# 2398 "parser.ml"
        ) = Obj.magic _3 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let i : (
# 14 "parser.mly"
       (Types.pre_info)
# 2404 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = 
# 140 "parser.mly"
                                                    ( i <+> (fst e2), Send (e1, e2) )
# 2412 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let i : (
# 15 "parser.mly"
       (Types.pre_info)
# 2440 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e_ in
        let _v : (Types.expr Types.info) = 
# 141 "parser.mly"
                                                    ( i <+> (fst e), Recv e )
# 2448 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = i;
                MenhirLib.EngineTypes.startp = _startpos_i_;
                MenhirLib.EngineTypes.endp = _endpos_i_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let _3 : (
# 13 "parser.mly"
       (Types.pre_info)
# 2488 "parser.ml"
        ) = Obj.magic _3 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let i : (
# 13 "parser.mly"
       (Types.pre_info)
# 2494 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = 
# 142 "parser.mly"
                                                    ( i <+> (fst e2), Spawn (e1, e2) )
# 2502 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let _2 : (
# 17 "parser.mly"
       (Types.pre_info)
# 2536 "parser.ml"
        ) = Obj.magic _2 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = 
# 143 "parser.mly"
                                                    ( (fst e1) <+> (fst e2), Seq (e1, e2) )
# 2545 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 9 "parser.mly"
       (Types.pre_info)
# 2579 "parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = let op = 
# 211 "parser.mly"
           ( i, Ast.Add )
# 2588 "parser.ml"
         in
        
# 144 "parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 2593 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 9 "parser.mly"
       (Types.pre_info)
# 2627 "parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = let op = 
# 212 "parser.mly"
           ( i, Ast.Sub )
# 2636 "parser.ml"
         in
        
# 144 "parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 2641 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 9 "parser.mly"
       (Types.pre_info)
# 2675 "parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = let op = 
# 213 "parser.mly"
           ( i, Ast.Mul )
# 2684 "parser.ml"
         in
        
# 144 "parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 2689 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 9 "parser.mly"
       (Types.pre_info)
# 2723 "parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = let op = 
# 214 "parser.mly"
           ( i, Ast.Div )
# 2732 "parser.ml"
         in
        
# 144 "parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 2737 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 9 "parser.mly"
       (Types.pre_info)
# 2771 "parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = let op = 
# 215 "parser.mly"
           ( i, Ast.Mod )
# 2780 "parser.ml"
         in
        
# 144 "parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 2785 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 9 "parser.mly"
       (Types.pre_info)
# 2819 "parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = let op = 
# 216 "parser.mly"
           ( i, Ast.And )
# 2828 "parser.ml"
         in
        
# 144 "parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 2833 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 9 "parser.mly"
       (Types.pre_info)
# 2867 "parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = let op = 
# 217 "parser.mly"
           ( i, Ast.Or )
# 2876 "parser.ml"
         in
        
# 144 "parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 2881 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 9 "parser.mly"
       (Types.pre_info)
# 2915 "parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = let op = 
# 218 "parser.mly"
           ( i, Ast.Lt )
# 2924 "parser.ml"
         in
        
# 144 "parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 2929 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 9 "parser.mly"
       (Types.pre_info)
# 2963 "parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = let op = 
# 219 "parser.mly"
           ( i, Ast.Le )
# 2972 "parser.ml"
         in
        
# 144 "parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 2977 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 9 "parser.mly"
       (Types.pre_info)
# 3011 "parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = let op = 
# 220 "parser.mly"
           ( i, Ast.Gt )
# 3020 "parser.ml"
         in
        
# 144 "parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 3025 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 9 "parser.mly"
       (Types.pre_info)
# 3059 "parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = let op = 
# 221 "parser.mly"
           ( i, Ast.Ge )
# 3068 "parser.ml"
         in
        
# 144 "parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 3073 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 9 "parser.mly"
       (Types.pre_info)
# 3107 "parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = let op = 
# 222 "parser.mly"
           ( i, Ast.Eq )
# 3116 "parser.ml"
         in
        
# 144 "parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 3121 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 9 "parser.mly"
       (Types.pre_info)
# 3155 "parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = let op = 
# 223 "parser.mly"
           ( i, Ast.Ne )
# 3164 "parser.ml"
         in
        
# 144 "parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 3169 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 9 "parser.mly"
       (Types.pre_info)
# 3203 "parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = let op = 
# 224 "parser.mly"
           ( i, Ast.Cat )
# 3212 "parser.ml"
         in
        
# 144 "parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 3217 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 9 "parser.mly"
       (Types.pre_info)
# 3251 "parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = let op = 
# 225 "parser.mly"
           ( i, Ast.Pipe )
# 3260 "parser.ml"
         in
        
# 144 "parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 3265 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 12 "parser.mly"
       (Types.pre_info)
# 3299 "parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = let op = 
# 226 "parser.mly"
           ( i, Ast.Cons )
# 3308 "parser.ml"
         in
        
# 144 "parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 3313 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 9 "parser.mly"
       (Types.pre_info)
# 3347 "parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = let op = 
# 227 "parser.mly"
           ( i, Ast.Assign )
# 3356 "parser.ml"
         in
        
# 144 "parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 3361 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let i : (
# 9 "parser.mly"
       (Types.pre_info)
# 3395 "parser.ml"
        ) = Obj.magic i in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = let op = 
# 228 "parser.mly"
           ( i, Ast.Bind )
# 3404 "parser.ml"
         in
        
# 144 "parser.mly"
                                                    ( (fst e1) <+> (fst e2), Bop (op, e1, e2) )
# 3409 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let i : (
# 9 "parser.mly"
       (Types.pre_info)
# 3437 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e_ in
        let _v : (Types.expr Types.info) = let op = 
# 231 "parser.mly"
          ( i, Ast.Neg )
# 3445 "parser.ml"
         in
        
# 145 "parser.mly"
                                                    ( (fst op) <+> (fst e), Uop (op, e) )
# 3450 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let i : (
# 10 "parser.mly"
       (Types.pre_info)
# 3478 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e_ in
        let _v : (Types.expr Types.info) = let op = 
# 232 "parser.mly"
          ( i, Ast.Not )
# 3486 "parser.ml"
         in
        
# 145 "parser.mly"
                                                    ( (fst op) <+> (fst e), Uop (op, e) )
# 3491 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let i : (
# 10 "parser.mly"
       (Types.pre_info)
# 3519 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e_ in
        let _v : (Types.expr Types.info) = let op = 
# 233 "parser.mly"
          ( i, Ast.Ref )
# 3527 "parser.ml"
         in
        
# 145 "parser.mly"
                                                    ( (fst op) <+> (fst e), Uop (op, e) )
# 3532 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let i : (
# 10 "parser.mly"
       (Types.pre_info)
# 3560 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e_ in
        let _v : (Types.expr Types.info) = let op = 
# 234 "parser.mly"
          ( i, Ast.Deref )
# 3568 "parser.ml"
         in
        
# 145 "parser.mly"
                                                    ( (fst op) <+> (fst e), Uop (op, e) )
# 3573 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = i;
            MenhirLib.EngineTypes.startp = _startpos_i_;
            MenhirLib.EngineTypes.endp = _endpos_i_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : (Types.expr Types.info) = Obj.magic e in
        let i : (
# 16 "parser.mly"
       (Types.pre_info)
# 3601 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e_ in
        let _v : (Types.expr Types.info) = 
# 146 "parser.mly"
                                                    ( i <+> (fst e), Return e )
# 3609 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = t;
                  MenhirLib.EngineTypes.startp = _startpos_t_;
                  MenhirLib.EngineTypes.endp = _endpos_t_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = f;
                      MenhirLib.EngineTypes.startp = _startpos_f_;
                      MenhirLib.EngineTypes.endp = _endpos_f_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = i;
                          MenhirLib.EngineTypes.startp = _startpos_i_;
                          MenhirLib.EngineTypes.endp = _endpos_i_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let _8 : (
# 8 "parser.mly"
       (Types.pre_info)
# 3679 "parser.ml"
        ) = Obj.magic _8 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _6 : (
# 9 "parser.mly"
       (Types.pre_info)
# 3685 "parser.ml"
        ) = Obj.magic _6 in
        let t : (
# 28 "parser.mly"
      (gtyp info)
# 3690 "parser.ml"
        ) = Obj.magic t in
        let _4 : (
# 17 "parser.mly"
       (Types.pre_info)
# 3695 "parser.ml"
        ) = Obj.magic _4 in
        let f : (
# 5 "parser.mly"
       (string Types.info)
# 3700 "parser.ml"
        ) = Obj.magic f in
        let _2 : (
# 8 "parser.mly"
       (Types.pre_info)
# 3705 "parser.ml"
        ) = Obj.magic _2 in
        let i : (
# 8 "parser.mly"
       (Types.pre_info)
# 3710 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = 
# 148 "parser.mly"
    ( i <+> (fst e2), LetRec (((fst f) <+> (fst t), ((fst f, PVar f),t)), e1, e2) )
# 3718 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _9;
            MenhirLib.EngineTypes.startp = _startpos__9_;
            MenhirLib.EngineTypes.endp = _endpos__9_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = t;
                  MenhirLib.EngineTypes.startp = _startpos_t_;
                  MenhirLib.EngineTypes.endp = _endpos_t_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _5;
                    MenhirLib.EngineTypes.startp = _startpos__5_;
                    MenhirLib.EngineTypes.endp = _endpos__5_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = tvs;
                      MenhirLib.EngineTypes.startp = _startpos_tvs_;
                      MenhirLib.EngineTypes.endp = _endpos_tvs_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = f;
                        MenhirLib.EngineTypes.startp = _startpos_f_;
                        MenhirLib.EngineTypes.endp = _endpos_f_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = i;
                            MenhirLib.EngineTypes.startp = _startpos_i_;
                            MenhirLib.EngineTypes.endp = _endpos_i_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let _9 : (
# 8 "parser.mly"
       (Types.pre_info)
# 3794 "parser.ml"
        ) = Obj.magic _9 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let _7 : (
# 9 "parser.mly"
       (Types.pre_info)
# 3800 "parser.ml"
        ) = Obj.magic _7 in
        let t : (
# 28 "parser.mly"
      (gtyp info)
# 3805 "parser.ml"
        ) = Obj.magic t in
        let _5 : (
# 17 "parser.mly"
       (Types.pre_info)
# 3810 "parser.ml"
        ) = Obj.magic _5 in
        let tvs : (Types.var Types.info list) = Obj.magic tvs in
        let f : (
# 5 "parser.mly"
       (string Types.info)
# 3816 "parser.ml"
        ) = Obj.magic f in
        let _2 : (
# 8 "parser.mly"
       (Types.pre_info)
# 3821 "parser.ml"
        ) = Obj.magic _2 in
        let i : (
# 8 "parser.mly"
       (Types.pre_info)
# 3826 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_e2_ in
        let _v : (Types.expr Types.info) = 
# 150 "parser.mly"
    ( i <+> (fst e2), LetRec (((fst f) <+> (fst t), ((fst f, PVar f),fold_fun_typ tvs t)), fold_fun tvs e1, e2) )
# 3834 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = a;
          MenhirLib.EngineTypes.startp = _startpos_a_;
          MenhirLib.EngineTypes.endp = _endpos_a_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let a : (
# 27 "parser.mly"
      (expr info)
# 3855 "parser.ml"
        ) = Obj.magic a in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_a_ in
        let _v : (Types.expr Types.info) = 
# 151 "parser.mly"
                                                  ( a )
# 3863 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let s : (
# 4 "parser.mly"
       (string Types.info)
# 3890 "parser.ml"
        ) = Obj.magic s in
        let _1 : (
# 19 "parser.mly"
       (Types.pre_info)
# 3895 "parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_s_ in
        let _v : (
# 22 "parser.mly"
      (string Types.info)
# 3903 "parser.ml"
        ) = 
# 106 "parser.mly"
                  ( s )
# 3907 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (string Types.info list) = 
# 211 "<standard.mly>"
    ( [] )
# 3925 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (string Types.info list) = Obj.magic xs in
        let x : (
# 22 "parser.mly"
      (string Types.info)
# 3953 "parser.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (string Types.info list) = 
# 213 "<standard.mly>"
    ( x :: xs )
# 3961 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Types.expr Types.info list) = 
# 142 "<standard.mly>"
    ( [] )
# 3979 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Types.expr Types.info list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Types.expr Types.info list) = 
# 144 "<standard.mly>"
    ( x )
# 4004 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Types.pat Types.info list) = 
# 142 "<standard.mly>"
    ( [] )
# 4022 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Types.pat Types.info list) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Types.pat Types.info list) = 
# 144 "<standard.mly>"
    ( x )
# 4047 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (
# 26 "parser.mly"
      (pat info * expr info)
# 4068 "parser.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((Types.pat Types.info * Types.expr Types.info) list) = 
# 221 "<standard.mly>"
    ( [ x ] )
# 4076 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : ((Types.pat Types.info * Types.expr Types.info) list) = Obj.magic xs in
        let x : (
# 26 "parser.mly"
      (pat info * expr info)
# 4104 "parser.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : ((Types.pat Types.info * Types.expr Types.info) list) = 
# 223 "<standard.mly>"
    ( x :: xs )
# 4112 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (
# 23 "parser.mly"
      (defn info)
# 4133 "parser.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Types.defn Types.info list) = 
# 221 "<standard.mly>"
    ( [ x ] )
# 4141 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Types.defn Types.info list) = Obj.magic xs in
        let x : (
# 23 "parser.mly"
      (defn info)
# 4169 "parser.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Types.defn Types.info list) = 
# 223 "<standard.mly>"
    ( x :: xs )
# 4177 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (
# 25 "parser.mly"
      (var info)
# 4198 "parser.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Types.var Types.info list) = 
# 221 "<standard.mly>"
    ( [ x ] )
# 4206 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Types.var Types.info list) = Obj.magic xs in
        let x : (
# 25 "parser.mly"
      (var info)
# 4234 "parser.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Types.var Types.info list) = 
# 223 "<standard.mly>"
    ( x :: xs )
# 4242 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = p;
            MenhirLib.EngineTypes.startp = _startpos_p_;
            MenhirLib.EngineTypes.endp = _endpos_p_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 17 "parser.mly"
       (Types.pre_info)
# 4275 "parser.ml"
        ) = Obj.magic _3 in
        let p : (
# 25 "parser.mly"
      (var info)
# 4280 "parser.ml"
        ) = Obj.magic p in
        let _1 : (
# 17 "parser.mly"
       (Types.pre_info)
# 4285 "parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (
# 25 "parser.mly"
      (var info)
# 4293 "parser.ml"
        ) = 
# 174 "parser.mly"
                              ( p )
# 4297 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = b;
          MenhirLib.EngineTypes.startp = _startpos_b_;
          MenhirLib.EngineTypes.endp = _endpos_b_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let b : (
# 24 "parser.mly"
      (pat info)
# 4318 "parser.ml"
        ) = Obj.magic b in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_b_ in
        let _endpos = _endpos_b_ in
        let _v : (
# 24 "parser.mly"
      (pat info)
# 4326 "parser.ml"
        ) = 
# 163 "parser.mly"
                                                      ( b )
# 4330 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : (
# 5 "parser.mly"
       (string Types.info)
# 4351 "parser.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : (
# 24 "parser.mly"
      (pat info)
# 4359 "parser.ml"
        ) = 
# 164 "parser.mly"
                                                      ( fst s, PVar s )
# 4363 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = p2;
            MenhirLib.EngineTypes.startp = _startpos_p2_;
            MenhirLib.EngineTypes.endp = _endpos_p2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = p1;
                MenhirLib.EngineTypes.startp = _startpos_p1_;
                MenhirLib.EngineTypes.endp = _endpos_p1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let r : (
# 17 "parser.mly"
       (Types.pre_info)
# 4408 "parser.ml"
        ) = Obj.magic r in
        let p2 : (
# 24 "parser.mly"
      (pat info)
# 4413 "parser.ml"
        ) = Obj.magic p2 in
        let _3 : (
# 17 "parser.mly"
       (Types.pre_info)
# 4418 "parser.ml"
        ) = Obj.magic _3 in
        let p1 : (
# 24 "parser.mly"
      (pat info)
# 4423 "parser.ml"
        ) = Obj.magic p1 in
        let l : (
# 17 "parser.mly"
       (Types.pre_info)
# 4428 "parser.ml"
        ) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v : (
# 24 "parser.mly"
      (pat info)
# 4436 "parser.ml"
        ) = 
# 165 "parser.mly"
                                                      ( l <+> r, PPair (p1, p2) )
# 4440 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = p2;
          MenhirLib.EngineTypes.startp = _startpos_p2_;
          MenhirLib.EngineTypes.endp = _endpos_p2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = p1;
              MenhirLib.EngineTypes.startp = _startpos_p1_;
              MenhirLib.EngineTypes.endp = _endpos_p1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let p2 : (
# 24 "parser.mly"
      (pat info)
# 4473 "parser.ml"
        ) = Obj.magic p2 in
        let _2 : (
# 12 "parser.mly"
       (Types.pre_info)
# 4478 "parser.ml"
        ) = Obj.magic _2 in
        let p1 : (
# 24 "parser.mly"
      (pat info)
# 4483 "parser.ml"
        ) = Obj.magic p1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_p1_ in
        let _endpos = _endpos_p2_ in
        let _v : (
# 24 "parser.mly"
      (pat info)
# 4491 "parser.ml"
        ) = 
# 166 "parser.mly"
                                                      ( (fst p1) <+> (fst p2), PCons (p1, p2) )
# 4495 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 17 "parser.mly"
       (Types.pre_info)
# 4528 "parser.ml"
        ) = Obj.magic _3 in
        let xs : (Types.pat Types.info list) = Obj.magic xs in
        let _1 : (
# 17 "parser.mly"
       (Types.pre_info)
# 4534 "parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (
# 24 "parser.mly"
      (pat info)
# 4542 "parser.ml"
        ) = let l = 
# 232 "<standard.mly>"
    ( xs )
# 4546 "parser.ml"
         in
        
# 167 "parser.mly"
                                                      ( defold_plist l )
# 4551 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ds;
            MenhirLib.EngineTypes.startp = _startpos_ds_;
            MenhirLib.EngineTypes.endp = _endpos_ds_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = is;
              MenhirLib.EngineTypes.startp = _startpos_is_;
              MenhirLib.EngineTypes.endp = _endpos_is_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 17 "parser.mly"
       (Types.pre_info)
# 4584 "parser.ml"
        ) = Obj.magic _3 in
        let ds : (Types.defn Types.info list) = Obj.magic ds in
        let is : (string Types.info list) = Obj.magic is in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_is_ in
        let _endpos = _endpos__3_ in
        let _v : (
# 60 "parser.mly"
       (Types.prog)
# 4594 "parser.ml"
        ) = 
# 100 "parser.mly"
                          ( is,ds )
# 4598 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (
# 27 "parser.mly"
      (expr info)
# 4619 "parser.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Types.expr Types.info list) = 
# 241 "<standard.mly>"
    ( [ x ] )
# 4627 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Types.expr Types.info list) = Obj.magic xs in
        let _2 : (
# 17 "parser.mly"
       (Types.pre_info)
# 4661 "parser.ml"
        ) = Obj.magic _2 in
        let x : (
# 27 "parser.mly"
      (expr info)
# 4666 "parser.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Types.expr Types.info list) = 
# 243 "<standard.mly>"
    ( x :: xs )
# 4674 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (
# 24 "parser.mly"
      (pat info)
# 4695 "parser.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Types.pat Types.info list) = 
# 241 "<standard.mly>"
    ( [ x ] )
# 4703 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Types.pat Types.info list) = Obj.magic xs in
        let _2 : (
# 17 "parser.mly"
       (Types.pre_info)
# 4737 "parser.ml"
        ) = Obj.magic _2 in
        let x : (
# 24 "parser.mly"
      (pat info)
# 4742 "parser.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Types.pat Types.info list) = 
# 243 "<standard.mly>"
    ( x :: xs )
# 4750 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 17 "parser.mly"
       (Types.pre_info)
# 4777 "parser.ml"
        ) = Obj.magic _2 in
        let e : (Types.expr Types.info) = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos__2_ in
        let _v : (
# 61 "parser.mly"
       (Types.expr Types.info)
# 4786 "parser.ml"
        ) = 
# 103 "parser.mly"
              ( e )
# 4790 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 18 "parser.mly"
       (Types.pre_info)
# 4811 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (
# 28 "parser.mly"
      (gtyp info)
# 4819 "parser.ml"
        ) = 
# 198 "parser.mly"
                        ( i, GUnit )
# 4823 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 18 "parser.mly"
       (Types.pre_info)
# 4844 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (
# 28 "parser.mly"
      (gtyp info)
# 4852 "parser.ml"
        ) = 
# 199 "parser.mly"
                        ( i, GInt )
# 4856 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 18 "parser.mly"
       (Types.pre_info)
# 4877 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (
# 28 "parser.mly"
      (gtyp info)
# 4885 "parser.ml"
        ) = 
# 200 "parser.mly"
                        ( i, GBool )
# 4889 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 18 "parser.mly"
       (Types.pre_info)
# 4910 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (
# 28 "parser.mly"
      (gtyp info)
# 4918 "parser.ml"
        ) = 
# 201 "parser.mly"
                        ( i, GString )
# 4922 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let i : (
# 18 "parser.mly"
       (Types.pre_info)
# 4949 "parser.ml"
        ) = Obj.magic i in
        let t : (
# 28 "parser.mly"
      (gtyp info)
# 4954 "parser.ml"
        ) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_i_ in
        let _v : (
# 28 "parser.mly"
      (gtyp info)
# 4962 "parser.ml"
        ) = 
# 202 "parser.mly"
                        ( (fst t) <+> i, GHandle t )
# 4966 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let i : (
# 10 "parser.mly"
       (Types.pre_info)
# 4993 "parser.ml"
        ) = Obj.magic i in
        let t : (
# 28 "parser.mly"
      (gtyp info)
# 4998 "parser.ml"
        ) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_i_ in
        let _v : (
# 28 "parser.mly"
      (gtyp info)
# 5006 "parser.ml"
        ) = 
# 203 "parser.mly"
                        ( (fst t) <+> i, GRef t )
# 5010 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let i : (
# 18 "parser.mly"
       (Types.pre_info)
# 5037 "parser.ml"
        ) = Obj.magic i in
        let t : (
# 28 "parser.mly"
      (gtyp info)
# 5042 "parser.ml"
        ) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_i_ in
        let _v : (
# 28 "parser.mly"
      (gtyp info)
# 5050 "parser.ml"
        ) = 
# 204 "parser.mly"
                        ( (fst t) <+> i, GPromise t)
# 5054 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let i : (
# 18 "parser.mly"
       (Types.pre_info)
# 5081 "parser.ml"
        ) = Obj.magic i in
        let t : (
# 28 "parser.mly"
      (gtyp info)
# 5086 "parser.ml"
        ) = Obj.magic t in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t_ in
        let _endpos = _endpos_i_ in
        let _v : (
# 28 "parser.mly"
      (gtyp info)
# 5094 "parser.ml"
        ) = 
# 205 "parser.mly"
                        ( (fst t) <+> i, GList t )
# 5098 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t2;
          MenhirLib.EngineTypes.startp = _startpos_t2_;
          MenhirLib.EngineTypes.endp = _endpos_t2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t1;
              MenhirLib.EngineTypes.startp = _startpos_t1_;
              MenhirLib.EngineTypes.endp = _endpos_t1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t2 : (
# 28 "parser.mly"
      (gtyp info)
# 5131 "parser.ml"
        ) = Obj.magic t2 in
        let _2 : (
# 9 "parser.mly"
       (Types.pre_info)
# 5136 "parser.ml"
        ) = Obj.magic _2 in
        let t1 : (
# 28 "parser.mly"
      (gtyp info)
# 5141 "parser.ml"
        ) = Obj.magic t1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t1_ in
        let _endpos = _endpos_t2_ in
        let _v : (
# 28 "parser.mly"
      (gtyp info)
# 5149 "parser.ml"
        ) = 
# 206 "parser.mly"
                        ( (fst t1) <+> (fst t2), GProd (t1, t2) )
# 5153 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t2;
          MenhirLib.EngineTypes.startp = _startpos_t2_;
          MenhirLib.EngineTypes.endp = _endpos_t2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = t1;
              MenhirLib.EngineTypes.startp = _startpos_t1_;
              MenhirLib.EngineTypes.endp = _endpos_t1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t2 : (
# 28 "parser.mly"
      (gtyp info)
# 5186 "parser.ml"
        ) = Obj.magic t2 in
        let _2 : (
# 7 "parser.mly"
       (Types.pre_info)
# 5191 "parser.ml"
        ) = Obj.magic _2 in
        let t1 : (
# 28 "parser.mly"
      (gtyp info)
# 5196 "parser.ml"
        ) = Obj.magic t1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_t1_ in
        let _endpos = _endpos_t2_ in
        let _v : (
# 28 "parser.mly"
      (gtyp info)
# 5204 "parser.ml"
        ) = 
# 207 "parser.mly"
                        ( (fst t1) <+> (fst t2), GFun (t1, t2) )
# 5208 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = t;
            MenhirLib.EngineTypes.startp = _startpos_t_;
            MenhirLib.EngineTypes.endp = _endpos_t_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 17 "parser.mly"
       (Types.pre_info)
# 5241 "parser.ml"
        ) = Obj.magic _3 in
        let t : (
# 28 "parser.mly"
      (gtyp info)
# 5246 "parser.ml"
        ) = Obj.magic t in
        let _1 : (
# 17 "parser.mly"
       (Types.pre_info)
# 5251 "parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (
# 28 "parser.mly"
      (gtyp info)
# 5259 "parser.ml"
        ) = 
# 208 "parser.mly"
                        ( t )
# 5263 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = t;
          MenhirLib.EngineTypes.startp = _startpos_t_;
          MenhirLib.EngineTypes.endp = _endpos_t_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = p;
              MenhirLib.EngineTypes.startp = _startpos_p_;
              MenhirLib.EngineTypes.endp = _endpos_p_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let t : (
# 28 "parser.mly"
      (gtyp info)
# 5296 "parser.ml"
        ) = Obj.magic t in
        let _2 : (
# 17 "parser.mly"
       (Types.pre_info)
# 5301 "parser.ml"
        ) = Obj.magic _2 in
        let p : (
# 24 "parser.mly"
      (pat info)
# 5306 "parser.ml"
        ) = Obj.magic p in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_p_ in
        let _endpos = _endpos_t_ in
        let _v : (
# 25 "parser.mly"
      (var info)
# 5314 "parser.ml"
        ) = 
# 171 "parser.mly"
                      ( (fst p) <+> (fst t), (p, t) )
# 5318 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 3 "parser.mly"
       (int Types.info)
# 5339 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (
# 27 "parser.mly"
      (expr info)
# 5347 "parser.ml"
        ) = 
# 184 "parser.mly"
                                                        ( fst i, Int i )
# 5351 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 19 "parser.mly"
       (Types.pre_info)
# 5372 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (
# 27 "parser.mly"
      (expr info)
# 5380 "parser.ml"
        ) = 
# 185 "parser.mly"
                                                        ( i, Self )
# 5384 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : (
# 4 "parser.mly"
       (string Types.info)
# 5405 "parser.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : (
# 27 "parser.mly"
      (expr info)
# 5413 "parser.ml"
        ) = 
# 186 "parser.mly"
                                                        ( fst s, String s )
# 5417 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : (
# 5 "parser.mly"
       (string Types.info)
# 5438 "parser.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v : (
# 27 "parser.mly"
      (expr info)
# 5446 "parser.ml"
        ) = 
# 187 "parser.mly"
                                                        ( fst s, Var s )
# 5450 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 6 "parser.mly"
       (Types.pre_info)
# 5471 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (
# 27 "parser.mly"
      (expr info)
# 5479 "parser.ml"
        ) = 
# 188 "parser.mly"
                                                        ( i, Bool (i, true) )
# 5483 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = i;
          MenhirLib.EngineTypes.startp = _startpos_i_;
          MenhirLib.EngineTypes.endp = _endpos_i_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let i : (
# 6 "parser.mly"
       (Types.pre_info)
# 5504 "parser.ml"
        ) = Obj.magic i in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_i_ in
        let _endpos = _endpos_i_ in
        let _v : (
# 27 "parser.mly"
      (expr info)
# 5512 "parser.ml"
        ) = 
# 189 "parser.mly"
                                                        ( i, Bool (i, false) )
# 5516 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = l;
            MenhirLib.EngineTypes.startp = _startpos_l_;
            MenhirLib.EngineTypes.endp = _endpos_l_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let r : (
# 17 "parser.mly"
       (Types.pre_info)
# 5543 "parser.ml"
        ) = Obj.magic r in
        let l : (
# 17 "parser.mly"
       (Types.pre_info)
# 5548 "parser.ml"
        ) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v : (
# 27 "parser.mly"
      (expr info)
# 5556 "parser.ml"
        ) = 
# 190 "parser.mly"
                                                        ( l <+> r, Unit )
# 5560 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = l;
              MenhirLib.EngineTypes.startp = _startpos_l_;
              MenhirLib.EngineTypes.endp = _endpos_l_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let r : (
# 17 "parser.mly"
       (Types.pre_info)
# 5593 "parser.ml"
        ) = Obj.magic r in
        let e : (Types.expr Types.info) = Obj.magic e in
        let l : (
# 17 "parser.mly"
       (Types.pre_info)
# 5599 "parser.ml"
        ) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v : (
# 27 "parser.mly"
      (expr info)
# 5607 "parser.ml"
        ) = 
# 191 "parser.mly"
                                                        ( l <+> r, snd e )
# 5611 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e2;
            MenhirLib.EngineTypes.startp = _startpos_e2_;
            MenhirLib.EngineTypes.endp = _endpos_e2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = e1;
                MenhirLib.EngineTypes.startp = _startpos_e1_;
                MenhirLib.EngineTypes.endp = _endpos_e1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = l;
                  MenhirLib.EngineTypes.startp = _startpos_l_;
                  MenhirLib.EngineTypes.endp = _endpos_l_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let r : (
# 17 "parser.mly"
       (Types.pre_info)
# 5656 "parser.ml"
        ) = Obj.magic r in
        let e2 : (Types.expr Types.info) = Obj.magic e2 in
        let _3 : (
# 17 "parser.mly"
       (Types.pre_info)
# 5662 "parser.ml"
        ) = Obj.magic _3 in
        let e1 : (Types.expr Types.info) = Obj.magic e1 in
        let l : (
# 17 "parser.mly"
       (Types.pre_info)
# 5668 "parser.ml"
        ) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v : (
# 27 "parser.mly"
      (expr info)
# 5676 "parser.ml"
        ) = 
# 192 "parser.mly"
                                                        ( l <+> r, Pair (e1, e2) )
# 5680 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = l;
              MenhirLib.EngineTypes.startp = _startpos_l_;
              MenhirLib.EngineTypes.endp = _endpos_l_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let r : (
# 17 "parser.mly"
       (Types.pre_info)
# 5713 "parser.ml"
        ) = Obj.magic r in
        let xs : (Types.expr Types.info list) = Obj.magic xs in
        let l : (
# 17 "parser.mly"
       (Types.pre_info)
# 5719 "parser.ml"
        ) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v : (
# 27 "parser.mly"
      (expr info)
# 5727 "parser.ml"
        ) = let ps = 
# 232 "<standard.mly>"
    ( xs )
# 5731 "parser.ml"
         in
        
# 193 "parser.mly"
                                                        ( l <+> r, snd (defold_list ps) )
# 5736 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = r;
          MenhirLib.EngineTypes.startp = _startpos_r_;
          MenhirLib.EngineTypes.endp = _endpos_r_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = l;
              MenhirLib.EngineTypes.startp = _startpos_l_;
              MenhirLib.EngineTypes.endp = _endpos_l_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let r : (
# 17 "parser.mly"
       (Types.pre_info)
# 5769 "parser.ml"
        ) = Obj.magic r in
        let e : (Types.expr Types.info) = Obj.magic e in
        let l : (
# 17 "parser.mly"
       (Types.pre_info)
# 5775 "parser.ml"
        ) = Obj.magic l in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_l_ in
        let _endpos = _endpos_r_ in
        let _v : (
# 27 "parser.mly"
      (expr info)
# 5783 "parser.ml"
        ) = 
# 194 "parser.mly"
                                                        ( l <+> r, snd e )
# 5787 "parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
    |]
  
  and trace =
    None
  
end

module MenhirInterpreter = struct
  
  module ET = MenhirLib.TableInterpreter.MakeEngineTable (Tables)
  
  module TI = MenhirLib.Engine.Make (ET)
  
  include TI
  
end

let top_expr =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 252 lexer lexbuf) : (
# 61 "parser.mly"
       (Types.expr Types.info)
# 5818 "parser.ml"
    ))

and program =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry 0 lexer lexbuf) : (
# 60 "parser.mly"
       (Types.prog)
# 5826 "parser.ml"
    ))

module Incremental = struct
  
  let top_expr =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 252 initial_position) : (
# 61 "parser.mly"
       (Types.expr Types.info)
# 5836 "parser.ml"
      ) MenhirInterpreter.checkpoint)
  
  and program =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 0 initial_position) : (
# 60 "parser.mly"
       (Types.prog)
# 5844 "parser.ml"
      ) MenhirInterpreter.checkpoint)
  
end

# 269 "<standard.mly>"
  

# 5852 "parser.ml"
